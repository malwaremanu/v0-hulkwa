var __defProp = Object.defineProperty, __typeError = e => { throw TypeError(e) }, __defNormalProp = (e, t, i) => t in e ? __defProp(e, t, { enumerable: !0, configurable: !0, writable: !0, value: i }) : e[t] = i, __publicField = (e, t, i) => __defNormalProp(e, "symbol" != typeof t ? t + "" : t, i), __accessCheck = (e, t, i) => t.has(e) || __typeError("Cannot " + i), __privateGet = (e, t, i) => (__accessCheck(e, t, "read from private field"), i ? i.call(e) : t.get(e)), __privateAdd = (e, t, i) => t.has(e) ? __typeError("Cannot add the same private member more than once") : t instanceof WeakSet ? t.add(e) : t.set(e, i), __privateSet = (e, t, i, a) => (__accessCheck(e, t, "write to private field"), a ? a.call(e, i) : t.set(e, i), i), __privateWrapper = (e, t, i, a) => ({ set _(a) { __privateSet(e, t, a, i) }, get _() { return __privateGet(e, t, a) } }); !function () { "use strict"; var e, t, i; const a = "EXT_INSTALLED", n = "request_from_injected_script"; const o = "https://backend.sheetwa.com"; class s { constructor() { __privateAdd(this, e, {}), __privateAdd(this, t, {}) } emit(i, ...a) { var n; for (__privateGet(this, e)[i] && __privateGet(this, e)[i].forEach((e => { e(...a) })); null == (n = __privateGet(this, t)[i]) ? void 0 : n.length;) { const e = __privateGet(this, t)[i].shift(); e && e(...a) } } on(t, i) { __privateGet(this, e)[t] ? __privateGet(this, e)[t].push(i) : __privateGet(this, e)[t] = [i] } once(e, i) { __privateGet(this, t)[e] ? __privateGet(this, t)[e].push(i) : __privateGet(this, t)[e] = [i] } } e = new WeakMap, t = new WeakMap; const r = { Page: { evaluate: async (e, ...t) => await e(...t), waitForFunction: async (e, { timeout: t } = { timeout: 0 }) => new Promise(((i, a) => { const n = setInterval((() => { e() && (clearInterval(n), i()) }), 500); t && setTimeout((() => { clearInterval(n), e() ? i() : a() }), t) })), waitForSelector: async (e, { timeout: t }) => new Promise(((i, a) => { const n = new MutationObserver(((t, a) => { document.querySelector(e) && (n.disconnect(), i()) })); n.observe(document, { childList: !0, attributes: !0, subtree: !0 }); document.querySelector(e) && (n.disconnect(), i()), t && setTimeout((() => { n.disconnect(), a("timeout") }), t) })), exposeFunction: async (e, t) => { window[e] = t } } }; function d(e) { for (var t = "", i = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789", a = 0; a < e; a++)t += i.charAt(Math.floor(62 * Math.random())); return t } function l(e, t) { return e = Number(String(e).replace(/\D/g, "")), t = Number(String(t).replace(/\D/g, "")), { number: e = e ? String(e) : "", countryCode: t = t ? String(t) : "", fullNumber: `${t}${e}` } } class c { constructor(e) { this.pupPage = e.pupPage } async openChatWindow(e) { await this.pupPage.evaluate((async e => { let t = window.SWA_Store.WidFactory.createWid(e), i = await window.SWA_Store.Chat.find(t); await window.SWA_Store.Cmd.openChatAt(i) }), e) } async openChatDrawer(e) { await this.pupPage.evaluate((async e => { let t = await window.SWA_Store.Chat.get(e); await window.SWA_Store.Cmd.openDrawerMid(t) }), e) } async openChatSearch(e) { await this.pupPage.evaluate((async e => { let t = await window.SWA_Store.Chat.get(e); await window.SWA_Store.Cmd.chatSearch(t) }), e) } async openChatWindowAt(e) { await this.pupPage.evaluate((async e => { let t = await window.SWA_Store.Msg.get(e), i = await window.SWA_Store.Chat.find(t.id.remote), a = await window.SWA_Store.SearchContext(i, t); await window.SWA_Store.Cmd.openChatAt(i, a) }), e) } async openMessageDrawer(e) { await this.pupPage.evaluate((async e => { let t = await window.SWA_Store.Msg.get(e); await window.SWA_Store.Cmd.msgInfoDrawer(t) }), e) } async getFeatures() { return await this.pupPage.evaluate((() => { if (!window.SWA_Store.Features) throw new Error("This version of Whatsapp Web does not support features"); return window.SWA_Store.Features.F })) } async checkFeatureStatus(e) { return await this.pupPage.evaluate((e => { if (!window.SWA_Store.Features) throw new Error("This version of Whatsapp Web does not support features"); return window.SWA_Store.Features.supportsFeature(e) }), e) } async enableFeatures(e) { await this.pupPage.evaluate((e => { if (!window.SWA_Store.Features) throw new Error("This version of Whatsapp Web does not support features"); for (const t in e) window.SWA_Store.Features.setFeature(e[t], !0) }), e) } async disableFeatures(e) { await this.pupPage.evaluate((e => { if (!window.SWA_Store.Features) throw new Error("This version of Whatsapp Web does not support features"); for (const t in e) window.SWA_Store.Features.setFeature(e[t], !1) }), e) } } const u = { puppeteer: { headless: !0, defaultViewport: null }, webVersion: "2.2346.52", webVersionCache: { type: "local" }, authTimeoutMs: 0, qrMaxRetries: 0, takeoverOnConflict: !1, takeoverTimeoutMs: 0, userAgent: "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.67 Safari/537.36", ffmpegPath: "ffmpeg", bypassCSP: !1, proxyAuthentication: void 0 }, m = "ready", p = "chat_removed", w = "chat_archived", h = "message", g = "message_ciphertext", f = "message_create", b = "message_revoke_everyone", y = "message_revoke_me", S = "message_ack", A = "message_edit", _ = "unread_count", W = "message_reaction", M = "media_uploaded", v = "contact_changed", C = "group_join", T = "group_leave", x = "group_admin_changed", O = "group_membership_request", G = "group_update", P = "loading_screen", E = "disconnected", k = "change_state", j = "location", L = "vcard", I = "multi_vcard", Z = "order", N = "groups_v4_invite", B = "payment", R = "poll_creation", q = "CONFLICT", F = "CONNECTED", z = "OPENING", J = "PAIRING", U = "TIMEOUT"; function D() { window.SWA_AuthStore = {}, window.SWA_AuthStore.AppState = window.require("WAWebSocketModel").Socket, window.SWA_AuthStore.Cmd = window.require("WAWebCmd").Cmd, window.SWA_AuthStore.Conn = window.require("WAWebConnModel").Conn, window.SWA_AuthStore.OfflineMessageHandler = window.require("WAWebOfflineHandler").OfflineMessageHandler, window.SWA_AuthStore.PairingCodeLinkUtils = window.require("WAWebAltDeviceLinkingApi"), window.SWA_AuthStore.Base64Tools = window.require("WABase64"), window.SWA_AuthStore.RegistrationUtils = { ...window.require("WAWebCompanionRegClientUtils"), ...window.require("WAWebAdvSignatureApi"), ...window.require("WAWebUserPrefsInfoStore"), ...window.require("WAWebSignalStoreApi") } } function V() { window.SWA_Store = Object.assign({}, window.require("WAWebCollections")), window.SWA_Store.AppState = window.require("WAWebSocketModel").Socket, window.SWA_Store.Conn = window.require("WAWebConnModel").Conn, window.SWA_Store.Cmd = window.require("WAWebCmd").Cmd, window.SWA_Store.MediaPrep = window.require("WAWebPrepRawMedia"), window.SWA_Store.MediaObject = window.require("WAWebMediaStorage"), window.SWA_Store.MediaTypes = window.require("WAWebMmsMediaTypes"), window.SWA_Store.MediaUpload = window.require("WAWebMediaMmsV4Upload"), window.SWA_Store.MsgKey = window.require("WAWebMsgKey"), window.SWA_Store.NumberInfo = window.require("WAPhoneUtils"), window.SWA_Store.PhoneFindCC = window.require("WAPhoneFindCC"), window.SWA_Store.OpaqueData = window.require("WAWebMediaOpaqueData"), window.SWA_Store.SendMessage = window.require("WAWebSendMsgChatAction"), window.SWA_Store.EditMessage = window.require("WAWebSendMessageEditAction"), window.SWA_Store.SendSeen = window.require("WAWebUpdateUnreadChatAction"), window.SWA_Store.User = window.require("WAWebUserPrefsMeUser"), window.SWA_Store.ContactMethods = window.require("WAWebContactGetters"), window.SWA_Store.UploadUtils = window.require("WAWebUploadManager"), window.SWA_Store.UserConstructor = window.require("WAWebWid"), window.SWA_Store.Validators = window.require("WALinkify"), window.SWA_Store.VCard = window.require("WAWebFrontendVcardUtils"), window.SWA_Store.WidFactory = window.require("WAWebWidFactory"), window.SWA_Store.ChatState = window.require("WAWebChatStateBridge"), window.SWA_Store.findCommonGroups = window.require("WAWebFindCommonGroupsContactAction").findCommonGroups, window.SWA_Store.ConversationMsgs = window.require("WAWebChatLoadMessages"), window.SWA_Store.createOrUpdateReactionsModule = window.require("WAWebDBCreateOrUpdateReactions"), window.SWA_Store.EphemeralFields = window.require("WAWebGetEphemeralFieldsMsgActionsUtils"), window.SWA_Store.MsgActionChecks = window.require("WAWebMsgActionCapability"), window.SWA_Store.QuotedMsg = window.require("WAWebQuotedMsgModelUtils"), window.SWA_Store.LinkPreview = window.require("WAWebLinkPreviewChatAction"), window.SWA_Store.SearchContext = window.require("WAWebChatMessageSearch").getSearchContext, window.SWA_Store.getMsgInfo = window.require("WAWebApiMessageInfoStore").queryMsgInfo, window.SWA_Store.QueryExist = window.require("WAWebQueryExistsJob").queryWidExists, window.SWA_Store.QueryExistJob = window.require("WAWebQueryExistsJob"), window.SWA_Store.PhoneNumberFormatUtils = window.require("WAWebLinkDevicePhoneNumberEntryInputFormatUtils"), window.SWA_Store.ReplyUtils = window.require("WAWebMsgReply"), window.SWA_Store.HistorySync = window.require("WAWebSendNonMessageDataRequest"), window.SWA_Store.Lid1X1MigrationGating = window.require("WAWebLid1X1MigrationGating"), window.SWA_Store.StickerTools = { ...window.require("WAWebImageUtils"), ...window.require("WAWebAddWebpMetadata") }, window.SWA_Store.GroupParticipants = { ...window.require("WAWebModifyParticipantsGroupAction"), ...window.require("WASmaxGroupsAddParticipantsRPC") }, window.SWA_Store.Chat._find && window.SWA_Store.Chat.findImpl || (window.SWA_Store.Chat._find = e => { const t = window.SWA_Store.Chat.get(e); return t ? Promise.resolve(t) : Promise.resolve({ id: e }) }, window.SWA_Store.Chat.findImpl = window.SWA_Store.Chat._find), window.injectToFunction = (e, t) => { const i = window.require(e.module), a = i[e.function]; i[e.function] = (...e) => t(a, ...e) }, window.injectToFunction({ module: "WAWebBackendJobsCommon", function: "mediaTypeFromProtobuf" }, ((e, ...t) => { const [i] = t; return i.locationMessage ? null : e(...t) })), window.injectToFunction({ module: "WAWebE2EProtoUtils", function: "typeAttributeFromProtobuf" }, ((e, ...t) => { const [i] = t; return i.locationMessage || i.groupInviteMessage ? "text" : e(...t) })) } function K() { window.WWebJS = {}, window.WWebJS.sendSeen = async e => { let t = window.SWA_Store.Chat.get(e); return void 0 !== t && (await window.SWA_Store.SendSeen.sendSeen(t, !1), !0) }, window.WWebJS.sendMessage = async (e, t, i = {}) => { var a, n, o; let s = {}; i.attachment && (s = i.sendMediaAsSticker ? await window.WWebJS.processStickerData(i.attachment) : await window.WWebJS.processMediaData(i.attachment, { forceVoice: i.sendAudioAsVoice, forceDocument: i.sendMediaAsDocument, forceGif: i.sendVideoAsGif }), s.caption = i.caption, t = i.sendMediaAsSticker ? void 0 : s.preview, s.isViewOnce = i.isViewOnce, delete i.attachment, delete i.sendMediaAsSticker); let r = {}; if (i.quotedMessageId) { let t = window.SWA_Store.Msg.get(i.quotedMessageId); (window.SWA_Store.ReplyUtils ? window.SWA_Store.ReplyUtils.canReplyMsg(t.unsafe()) : t.canReply()) && (r = t.msgContextInfo(e)), delete i.quotedMessageId } i.mentionedJidList && (i.mentionedJidList = await Promise.all(i.mentionedJidList.map((async e => { const t = window.SWA_Store.WidFactory.createWid(e); if (await window.SWA_Store.QueryExist(t)) return t }))), i.mentionedJidList = i.mentionedJidList.filter(Boolean)), i.groupMentions && (i.groupMentions = i.groupMentions.map((e => ({ groupSubject: e.subject, groupJid: window.SWA_Store.WidFactory.createWid(e.id) })))); let d = {}; if (i.location) { let { latitude: e, longitude: t, description: o, url: s } = i.location; s = null == (n = null == (a = window.SWA_Store.Validators) ? void 0 : a.findLink(s)) ? void 0 : n.href, s && !o && (o = s), d = { type: "location", loc: o, lat: e, lng: t, clientUrl: s }, delete i.location } let l = {}; if (i.poll) { const { pollName: e, pollOptions: t } = i.poll, { allowMultipleAnswers: a, messageSecret: n } = i.poll.options; l = { type: "poll_creation", pollName: e, pollOptions: t, pollSelectableOptionsCount: a ? 0 : 1, messageSecret: Array.isArray(n) && 32 === n.length ? new Uint8Array(n) : window.crypto.getRandomValues(new Uint8Array(32)) }, delete i.poll } let c = {}; if (i.contactCard) { let e = window.SWA_Store.Contact.get(i.contactCard); c = { body: window.SWA_Store.VCard.vcardFromContactModel(e).vcard, type: "vcard", vcardFormattedName: e.formattedName }, delete i.contactCard } else if (i.contactCardList) { c = { type: "multi_vcard", vcardList: i.contactCardList.map((e => window.SWA_Store.Contact.get(e))).map((e => window.SWA_Store.VCard.vcardFromContactModel(e))), body: void 0 }, delete i.contactCardList } else if (i.parseVCards && "string" == typeof t && t.startsWith("BEGIN:VCARD")) { delete i.parseVCards; try { const e = window.SWA_Store.VCard.parseVcard(t); e && (c = { type: "vcard", vcardFormattedName: window.SWA_Store.VCard.vcardGetNameFromParsed(e) }) } catch (y) { } } if (i.linkPreview) { delete i.linkPreview; const e = null == (o = window.SWA_Store.Validators) ? void 0 : o.findLink(t); if (e) { let t = await window.SWA_Store.LinkPreview.getLinkPreview(e); t && t.data && (t = t.data, t.preview = !0, t.subtype = "url", i = { ...i, ...t }) } } let u = {}; if (i.buttons) { let e; e = "chat" === i.buttons.type ? t = i.buttons.body : i.caption ? i.caption : " ", u = { productHeaderImageRejected: !1, isFromTemplate: !1, isDynamicReplyButtonsMsg: !0, title: i.buttons.title ? i.buttons.title : void 0, footer: i.buttons.footer ? i.buttons.footer : void 0, dynamicReplyButtons: i.buttons.buttons, replyButtons: i.buttons.buttons, caption: e }, delete i.buttons } let m = {}; if (i.list) { if ("smba" === window.SWA_Store.Conn.platform || "smbi" === window.SWA_Store.Conn.platform) throw "[LT01] Whatsapp business can't send this yet"; m = { type: "list", footer: i.list.footer, list: { ...i.list, listType: 1 }, body: i.list.description }, delete i.list, delete m.list.footer } const p = window.SWA_Store.User.getMaybeMePnUser(), w = await window.SWA_Store.MsgKey.newId(), h = new window.SWA_Store.MsgKey({ from: p, to: e.id, id: w, participant: e.id.isGroup() ? p : void 0, selfDir: "out" }), g = i.extraOptions || {}; delete i.extraOptions; const f = window.SWA_Store.EphemeralFields.getEphemeralFields(e), b = { ...i, id: h, ack: 0, body: t, from: p, to: e.id, local: !0, self: "out", t: parseInt((new Date).getTime() / 1e3), isNewMsg: !0, type: "chat", ...f, ...d, ...l, ...s, ...s.toJSON ? s.toJSON() : {}, ...r, ...c, ...u, ...m, ...g }; return await window.SWA_Store.SendMessage.addAndSendMsgToChat(e, b), await window.SWA_Store.HistorySync.sendPeerDataOperationRequest(3, { chatId: e.id }), window.SWA_Store.Msg.get(h._serialized) }, window.WWebJS.editMessage = async (e, t, i = {}) => { var a; const n = i.extraOptions || {}; if (delete i.extraOptions, i.mentionedJidList && (i.mentionedJidList = await Promise.all(i.mentionedJidList.map((async e => { const t = window.SWA_Store.WidFactory.createWid(e); if (await window.SWA_Store.QueryExist(t)) return t }))), i.mentionedJidList = i.mentionedJidList.filter(Boolean)), i.groupMentions && (i.groupMentions = i.groupMentions.map((e => ({ groupSubject: e.subject, groupJid: window.SWA_Store.WidFactory.createWid(e.id) })))), i.linkPreview) { delete i.linkPreview; const e = null == (a = window.SWA_Store.Validators) ? void 0 : a.findLink(t); if (e) { const t = await window.SWA_Store.LinkPreview.getLinkPreview(e); t.preview = !0, t.subtype = "url", i = { ...i, ...t } } } const o = { ...i, ...n }; return await window.SWA_Store.EditMessage.sendMessageEdit(e, t, o), window.SWA_Store.Msg.get(e.id._serialized) }, window.WWebJS.toStickerData = async e => { if ("image/webp" == e.mimetype) return e; const t = window.WWebJS.mediaInfoToFile(e), i = await window.SWA_Store.StickerTools.toWebpSticker(t), a = await i.arrayBuffer(); return { mimetype: "image/webp", data: window.WWebJS.arrayBufferToBase64(a) } }, window.WWebJS.processStickerData = async e => { if ("image/webp" !== e.mimetype) throw new Error("Invalid media type"); const t = window.WWebJS.mediaInfoToFile(e); let i = await window.WWebJS.getFileHash(t), a = await window.WWebJS.generateHash(32); const n = new AbortController, o = await window.SWA_Store.UploadUtils.encryptAndUpload({ blob: t, type: "sticker", signal: n.signal, mediaKey: a }); return { ...o, clientUrl: o.url, deprecatedMms3Url: o.url, uploadhash: o.encFilehash, size: t.size, type: "sticker", filehash: i } }, window.WWebJS.processMediaData = async (e, { forceVoice: t, forceDocument: i, forceGif: a }) => { const n = window.WWebJS.mediaInfoToFile(e), o = await window.SWA_Store.OpaqueData.createFromData(n, n.type), s = window.SWA_Store.MediaPrep.prepRawMedia(o, { asDocument: i }), r = await s.waitForPrep(), d = window.SWA_Store.MediaObject.getOrCreateMediaObject(r.filehash), l = window.SWA_Store.MediaTypes.msgToMediaType({ type: r.type, isGif: r.isGif }); if (t && "audio" === r.type) { r.type = "ptt"; const e = d.contentInfo.waveform; r.waveform = e ?? await window.WWebJS.generateWaveform(n) } a && "video" === r.type && (r.isGif = !0), i && (r.type = "document"), r.mediaBlob instanceof window.SWA_Store.OpaqueData || (r.mediaBlob = await window.SWA_Store.OpaqueData.createFromData(r.mediaBlob, r.mediaBlob.type)), r.renderableUrl = r.mediaBlob.url(), d.consolidate(r.toJSON()), r.mediaBlob.autorelease(); const c = (await window.SWA_Store.MediaUpload.uploadMedia({ mimetype: r.mimetype, mediaObject: d, mediaType: l })).mediaEntry; if (!c) throw new Error("upload failed: media entry was not created"); return r.set({ clientUrl: c.mmsUrl, deprecatedMms3Url: c.deprecatedMms3Url, directPath: c.directPath, mediaKey: c.mediaKey, mediaKeyTimestamp: c.mediaKeyTimestamp, filehash: d.filehash, encFilehash: c.encFilehash, uploadhash: c.uploadHash, size: d.size, streamingSidecar: c.sidecar, firstFrameSidecar: c.firstFrameSidecar }), r }, window.WWebJS.getMessageModel = e => { var t; const i = e.serialize(); return i.isEphemeral = e.isEphemeral, i.isStatusV3 = e.isStatusV3, i.links = (null == (t = window.SWA_Store.Validators) ? void 0 : t.findLinks(e.mediaObject ? e.caption : e.body)).map((e => ({ link: e.href, isSuspicious: Boolean(e.suspiciousCharacters && e.suspiciousCharacters.size) }))), i.buttons && (i.buttons = i.buttons.serialize()), i.dynamicReplyButtons && (i.dynamicReplyButtons = JSON.parse(JSON.stringify(i.dynamicReplyButtons))), i.replyButtons && (i.replyButtons = JSON.parse(JSON.stringify(i.replyButtons))), "object" == typeof i.id.remote && (i.id = Object.assign({}, i.id, { remote: i.id.remote._serialized })), delete i.pendingAckUpdate, i }, window.WWebJS.getChatModel = async e => { let t = e.serialize(); if (t.isGroup = !1, t.formattedTitle = e.formattedTitle, t.isMuted = 0 != e.muteExpiration, e.groupMetadata) { t.isGroup = !0; const i = window.SWA_Store.WidFactory.createWid(e.id._serialized); await window.SWA_Store.GroupMetadata.update(i), e.groupMetadata.participants._models.filter((e => e.id._serialized.endsWith("@lid"))).forEach((e => { var t; e.id = null == (t = e.contact) ? void 0 : t.phoneNumber })), t.groupMetadata = e.groupMetadata.serialize() } if (t.lastMessage = null, t.msgs && t.msgs.length) { const i = e.lastReceivedKey ? window.SWA_Store.Msg.get(e.lastReceivedKey._serialized) : null; i && (t.lastMessage = window.WWebJS.getMessageModel(i)) } return delete t.msgs, delete t.msgUnsyncedButtonReplyMsgs, delete t.unsyncedButtonReplies, t }, window.WWebJS.getChat = async e => { const t = window.SWA_Store.WidFactory.createWid(e), i = await window.SWA_Store.Chat.find(t); let a = await window.WWebJS.getChatModel(i); return console.log("res>>> getChat", a), a }, window.WWebJS.getChats = async () => { const e = window.SWA_Store.Chat.getModelsArray().map((e => window.WWebJS.getChatModel(e))); return await Promise.all(e) }, window.WWebJS.getContactModel = e => { let t = e.serialize(); t.isBusiness = void 0 !== e.isBusiness && e.isBusiness, e.businessProfile && (t.businessProfile = e.businessProfile.serialize()); const i = window.WWebJS.compareWwebVersions(window.Debug.VERSION, "<", "2.2327.4"); return t.isMe = i ? e.isMe : window.SWA_Store.ContactMethods.getIsMe(e), t.isUser = i ? e.isUser : window.SWA_Store.ContactMethods.getIsUser(e), t.isGroup = i ? e.isGroup : window.SWA_Store.ContactMethods.getIsGroup(e), t.isWAContact = i ? e.isWAContact : window.SWA_Store.ContactMethods.getIsWAContact(e), t.isMyContact = i ? e.isMyContact : window.SWA_Store.ContactMethods.getIsMyContact(e), t.isBlocked = e.isContactBlocked, t.userid = i ? e.userid : window.SWA_Store.ContactMethods.getUserid(e), t.isEnterprise = i ? e.isEnterprise : window.SWA_Store.ContactMethods.getIsEnterprise(e), t.verifiedName = i ? e.verifiedName : window.SWA_Store.ContactMethods.getVerifiedName(e), t.verifiedLevel = i ? e.verifiedLevel : window.SWA_Store.ContactMethods.getVerifiedLevel(e), t.statusMute = i ? e.statusMute : window.SWA_Store.ContactMethods.getStatusMute(e), t.name = i ? e.name : window.SWA_Store.ContactMethods.getName(e), t.shortName = i ? e.shortName : window.SWA_Store.ContactMethods.getShortName(e), t.pushname = i ? e.pushname : window.SWA_Store.ContactMethods.getPushname(e), t }, window.WWebJS.getContact = async e => { const t = window.SWA_Store.WidFactory.createWid(e); let i = await window.SWA_Store.Contact.find(t); i.id._serialized.endsWith("@lid") && (i.id = null == i ? void 0 : i.phoneNumber); const a = await window.SWA_Store.BusinessProfile.fetchBizProfile(t); return a.profileOptions && (i.businessProfile = a), window.WWebJS.getContactModel(i) }, window.WWebJS.getContacts = () => window.SWA_Store.Contact.getModelsArray().map((e => window.WWebJS.getContactModel(e))), window.WWebJS.mediaInfoToFile = ({ data: e, mimetype: t, filename: i }) => { const a = window.atob(e), n = new ArrayBuffer(a.length), o = new Uint8Array(n); for (let r = 0; r < a.length; r++)o[r] = a.charCodeAt(r); const s = new Blob([n], { type: t }); return new File([s], i, { type: t, lastModified: Date.now() }) }, window.WWebJS.arrayBufferToBase64 = e => { let t = ""; const i = new Uint8Array(e), a = i.byteLength; for (let n = 0; n < a; n++)t += String.fromCharCode(i[n]); return window.btoa(t) }, window.WWebJS.arrayBufferToBase64Async = e => new Promise(((t, i) => { const a = new Blob([e], { type: "application/octet-stream" }), n = new FileReader; n.onload = () => { const [, e] = n.result.split(","); t(e) }, n.onerror = e => i(e), n.readAsDataURL(a) })), window.WWebJS.getFileHash = async e => { let t = await e.arrayBuffer(); const i = await crypto.subtle.digest("SHA-256", t); return btoa(String.fromCharCode(...new Uint8Array(i))) }, window.WWebJS.generateHash = async e => { for (var t = "", i = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789", a = 0; a < e; a++)t += i.charAt(Math.floor(62 * Math.random())); return t }, window.WWebJS.generateWaveform = async e => { try { const t = await e.arrayBuffer(), i = new AudioContext, a = (await i.decodeAudioData(t)).getChannelData(0), n = 64, o = Math.floor(a.length / n), s = []; for (let e = 0; e < n; e++) { const t = o * e; let i = 0; for (let e = 0; e < o; e++)i += Math.abs(a[t + e]); s.push(i / o) } const r = Math.pow(Math.max(...s), -1), d = s.map((e => e * r)); return new Uint8Array(d.map((e => Math.floor(100 * e)))) } catch (t) { return } }, window.WWebJS.sendChatstate = async (e, t) => { switch (t = window.SWA_Store.WidFactory.createWid(t), e) { case "typing": await window.SWA_Store.ChatState.sendChatStateComposing(t); break; case "recording": await window.SWA_Store.ChatState.sendChatStateRecording(t); break; case "stop": await window.SWA_Store.ChatState.sendChatStatePaused(t); break; default: throw "Invalid chatstate" }return !0 }, window.WWebJS.getLabelModel = e => { let t = e.serialize(); return t.hexColor = e.hexColor, t }, window.WWebJS.getLabels = () => window.SWA_Store.Label.getModelsArray().map((e => window.WWebJS.getLabelModel(e))), window.WWebJS.getLabel = e => { const t = window.SWA_Store.Label.get(e); return window.WWebJS.getLabelModel(t) }, window.WWebJS.getChatLabels = async e => ((await window.WWebJS.getChat(e)).labels || []).map((e => window.WWebJS.getLabel(e))), window.WWebJS.cropAndResizeImage = async (e, t = {}) => { if (!e.mimetype.includes("image")) throw new Error("Media is not an image"); t.mimetype && !t.mimetype.includes("image") && delete t.mimetype, t = Object.assign({ size: 640, mimetype: e.mimetype, quality: .75, asDataUrl: !1 }, t); const i = await new Promise(((t, i) => { const a = new Image; a.onload = () => t(a), a.onerror = i, a.src = `data:${e.mimetype};base64,${e.data}` })), a = Math.min(i.width, i.height), n = Math.floor((i.width - a) / 2), o = Math.floor((i.height - a) / 2), s = document.createElement("canvas"); s.width = t.size, s.height = t.size; s.getContext("2d").drawImage(i, n, o, a, a, 0, 0, t.size, t.size); const r = s.toDataURL(t.mimetype, t.quality); return t.asDataUrl ? r : Object.assign(e, { mimetype: t.mimeType, data: r.replace(`data:${t.mimeType};base64,`, "") }) }, window.WWebJS.compareWwebVersions = (e, t, i) => { if (![">", ">=", "<", "<=", "="].includes(t)) throw new class extends Error { constructor(e) { super(e), this.name = "CompareWwebVersionsError" } }("Invalid comparison operator is provided"); if ("string" != typeof e || "string" != typeof i) throw new class extends Error { constructor(e) { super(e), this.name = "CompareWwebVersionsError" } }("A non-string WWeb version type is provided"); for (e = e.replace(/-beta$/, ""), i = i.replace(/-beta$/, ""); e.length !== i.length;)e.length > i.length ? i = i.concat("0") : e = e.concat("0"); return e = Number(e.replace(/\./g, "")), i = Number(i.replace(/\./g, "")), ">" === t ? e > i : ">=" === t ? e >= i : "<" === t ? e < i : "<=" === t ? e <= i : "=" === t && e === i } } class H { constructor(e) { Object.defineProperty(this, "client", { value: e }) } _clone() { return Object.assign(Object.create(this), this) } _patch(e) { return e } } class Q { constructor(e, t, i, a) { this.mimetype = e, this.data = t, this.filename = i, this.filesize = a } } class $ { constructor(e, t, i = {}) { this.latitude = e, this.longitude = t, this.name = i.name, this.address = i.address, this.url = i.url, this.description = this.name && this.address ? `${this.name}\n${this.address}` : this.name || this.address || "" } } class X extends H { constructor(e, t) { super(e), t && this._patch(t) } _patch(e) { return this.id = e.id, this.retailer_id = e.retailer_id, this.name = e.name, this.description = e.description, super._patch(e) } } class Y extends H { constructor(e, t) { super(e), t && this._patch(t) } _patch(e) { return this.id = e.id, this.price = e.price ? e.price : "", this.thumbnailUrl = e.thumbnailUrl, this.currency = e.currency, this.name = e.name, this.quantity = e.quantity, this.data = null, super._patch(e) } async getData() { if (null === this.data) { let e = await this.client.pupPage.evaluate((e => window.WWebJS.getProductMetadata(e)), this.id); this.data = e ? new X(this.client, e) : void 0 } return this.data } } class ee extends H { constructor(e, t) { super(e), t && this._patch(t) } _patch(e) { return e.products && (this.products = e.products.map((e => new Y(this.client, e)))), this.subtotal = e.subtotal, this.total = e.total, this.currency = e.currency, this.createdAt = e.createdAt, super._patch(e) } } class te extends H { constructor(e, t) { super(e), t && this._patch(t) } _patch(e) { return this.id = e.id, this.paymentCurrency = e.paymentCurrency, this.paymentAmount1000 = e.paymentAmount1000, this.paymentMessageReceiverJid = e.paymentMessageReceiverJid, this.paymentTransactionTimestamp = e.paymentTransactionTimestamp, this.paymentStatus = e.paymentStatus, this.paymentTxnStatus = e.paymentTxnStatus, this.paymentNote = e.paymentNoteMsg && e.paymentNoteMsg.body ? e.paymentNoteMsg.body : void 0, super._patch(e) } } class ie extends H { constructor(e, t) { super(e), t && this._patch(t) } _patch(e) { return this.id = e.msgKey, this.orphan = e.orphan, this.orphanReason = e.orphanReason, this.timestamp = e.timestamp, this.reaction = e.reactionText, this.read = e.read, this.msgId = e.parentMsgKey, this.senderId = e.senderUserJid, this.ack = e.ack, super._patch(e) } } class ae extends H { constructor(e, t) { super(e), t && this._patch(t) } _patch(e) { return this.id = e.id, this.number = e.userid, this.isBusiness = e.isBusiness, this.isEnterprise = e.isEnterprise, this.labels = e.labels, this.name = e.name, this.pushname = e.pushname, this.sectionHeader = e.sectionHeader, this.shortName = e.shortName, this.statusMute = e.statusMute, this.type = e.type, this.verifiedLevel = e.verifiedLevel, this.verifiedName = e.verifiedName, this.isMe = e.isMe, this.isUser = e.isUser, this.isGroup = e.isGroup, this.isWAContact = e.isWAContact, this.isMyContact = e.isMyContact, this.isBlocked = e.isBlocked, super._patch(e) } async getProfilePicUrl() { return await this.client.getProfilePicUrl(this.id._serialized) } async getFormattedNumber() { return await this.client.getFormattedNumber(this.id._serialized) } async getCountryCode() { return await this.client.getCountryCode(this.id._serialized) } async getChat() { return this.isMe ? null : await this.client.getChatById(this.id._serialized) } async getCommonGroups() { return await this.client.getCommonGroups(this.id._serialized) } } class ne extends H { constructor(e, t) { super(e), t && this._patch(t) } _patch(e) { return this._data = e, this.mediaKey = e.mediaKey, this.id = e.id, this.ack = e.ack, this.hasMedia = Boolean(e.mediaKey && e.directPath), this.body = this.hasMedia ? e.caption || "" : e.body || e.pollName || "", this.type = e.type, this.timestamp = e.t, this.from = "object" == typeof e.from && null !== e.from ? e.from._serialized : e.from, this.to = "object" == typeof e.to && null !== e.to ? e.to._serialized : e.to, this.author = "object" == typeof e.author && null !== e.author ? e.author._serialized : e.author, this.deviceType = "string" == typeof e.id.id && e.id.id.length > 21 ? "android" : "string" == typeof e.id.id && "3A" === e.id.id.substring(0, 2) ? "ios" : "web", this.isForwarded = e.isForwarded, this.forwardingScore = e.forwardingScore || 0, this.isStatus = e.isStatusV3 || "status@broadcast" === e.id.remote, this.isStarred = e.star, this.broadcast = e.broadcast, this.fromMe = e.id.fromMe, this.hasQuotedMsg = !!e.quotedMsg, this.hasReaction = !!e.hasReaction, this.duration = e.duration ? e.duration : void 0, this.location = (() => { if (e.type !== j) return; let t; if (e.loc && "string" == typeof e.loc) { let i = e.loc.split("\n"); t = { name: i[0], address: i[1], url: e.clientUrl } } return new $(e.lat, e.lng, t) })(), this.vCards = e.type === I ? e.vcardList.map((e => e.vcard)) : e.type === L ? [e.body] : [], this.inviteV4 = e.type === N ? { inviteCode: e.inviteCode, inviteCodeExp: e.inviteCodeExp, groupId: e.inviteGrp, groupName: e.inviteGrpName, fromId: "_serialized" in e.from ? e.from._serialized : e.from, toId: "_serialized" in e.to ? e.to._serialized : e.to } : void 0, this.mentionedIds = e.mentionedJidList || [], this.groupMentions = e.groupMentions || [], this.orderId = e.orderId ? e.orderId : void 0, this.token = e.token ? e.token : void 0, this.isGif = Boolean(e.isGif), this.isEphemeral = e.isEphemeral, e.title && (this.title = e.title), e.description && (this.description = e.description), e.businessOwnerJid && (this.businessOwnerJid = e.businessOwnerJid), e.productId && (this.productId = e.productId), e.latestEditSenderTimestampMs && (this.latestEditSenderTimestampMs = e.latestEditSenderTimestampMs), e.latestEditMsgKey && (this.latestEditMsgKey = e.latestEditMsgKey), this.links = e.links, e.dynamicReplyButtons && (this.dynamicReplyButtons = e.dynamicReplyButtons), e.selectedButtonId && (this.selectedButtonId = e.selectedButtonId), e.listResponse && e.listResponse.singleSelectReply.selectedRowId && (this.selectedRowId = e.listResponse.singleSelectReply.selectedRowId), this.type === R && (this.pollName = e.pollName, this.pollOptions = e.pollOptions, this.allowMultipleAnswers = Boolean(!e.pollSelectableOptionsCount), this.pollInvalidated = e.pollInvalidated, this.isSentCagPollCreation = e.isSentCagPollCreation, delete this._data.pollName, delete this._data.pollOptions, delete this._data.pollSelectableOptionsCount, delete this._data.pollInvalidated, delete this._data.isSentCagPollCreation), super._patch(e) } _getChatId() { return this.fromMe ? this.to : this.from } async reload() { const e = await this.client.pupPage.evaluate((e => { const t = window.SWA_Store.Msg.get(e); return t ? window.WWebJS.getMessageModel(t) : null }), this.id._serialized); return e ? (this._patch(e), this) : null } get rawData() { return this._data } getChat() { return this.client.getChatById(this._getChatId()) } getContact() { return this.client.getContactById(this.author || this.from) } async getMentions() { return await Promise.all(this.mentionedIds.map((async e => await this.client.getContactById(e)))) } async getGroupMentions() { return await Promise.all(this.groupMentions.map((async e => await this.client.getChatById(e.groupJid._serialized)))) } async getQuotedMessage() { if (!this.hasQuotedMsg) return; const e = await this.client.pupPage.evaluate((e => { const t = window.SWA_Store.Msg.get(e), i = window.SWA_Store.QuotedMsg.getQuotedMsgObj(t); return window.WWebJS.getMessageModel(i) }), this.id._serialized); return new ne(this.client, e) } async reply(e, t, i = {}) { return t || (t = this._getChatId()), i = { ...i, quotedMessageId: this.id._serialized }, this.client.sendMessage(t, e, i) } async acceptGroupV4Invite() { return await this.client.acceptGroupV4Invite(this.inviteV4) } async delete(e) { await this.client.pupPage.evaluate((async (e, t) => { let i = window.SWA_Store.Msg.get(e), a = await window.SWA_Store.Chat.find(i.id.remote); const n = window.SWA_Store.MsgActionChecks.canSenderRevokeMsg(i) || window.SWA_Store.MsgActionChecks.canAdminRevokeMsg(i); return t && n ? window.SWA_Store.Cmd.sendRevokeMsgs(a, [i], { clearMedia: !0, type: i.id.fromMe ? "Sender" : "Admin" }) : window.SWA_Store.Cmd.sendDeleteMsgs(a, [i], !0) }), this.id._serialized, e) } async star() { await this.client.pupPage.evaluate((async e => { let t = window.SWA_Store.Msg.get(e); if (window.SWA_Store.MsgActionChecks.canStarMsg(t)) { let e = await window.SWA_Store.Chat.find(t.id.remote); return window.SWA_Store.Cmd.sendStarMsgs(e, [t], !1) } }), this.id._serialized) } async unstar() { await this.client.pupPage.evaluate((async e => { let t = window.SWA_Store.Msg.get(e); if (window.SWA_Store.MsgActionChecks.canStarMsg(t)) { let e = await window.SWA_Store.Chat.find(t.id.remote); return window.SWA_Store.Cmd.sendUnstarMsgs(e, [t], !1) } }), this.id._serialized) } async getInfo() { return await this.client.pupPage.evaluate((async e => { const t = window.SWA_Store.Msg.get(e); return t && t.id.fromMe ? new Promise((e => { setTimeout((async () => { e(await window.SWA_Store.getMsgInfo(t.id)) }), Date.now() - 1e3 * t.t < 1250 && Math.floor(101 * Math.random()) + 1100 || 0) })) : null }), this.id._serialized) } async getOrder() { if (this.type === Z) { const e = await this.client.pupPage.evaluate(((e, t, i) => window.WWebJS.getOrderDetail(e, t, i)), this.orderId, this.token, this._getChatId()); if (!e) return; return new ee(this.client, e) } } async getPayment() { if (this.type === B) { const e = await this.client.pupPage.evaluate((async e => { const t = window.SWA_Store.Msg.get(e); return t ? t.serialize() : null }), this.id._serialized); return new te(this.client, e) } } async getReactions() { if (!this.hasReaction) return; const e = await this.client.pupPage.evaluate((async e => { const t = await window.SWA_Store.Reactions.find(e); return t && t.reactions.length ? t.reactions.serialize() : null }), this.id._serialized); return e ? e.map((e => (e.senders = e.senders.map((e => (e.timestamp = Math.round(e.timestamp / 1e3), new ie(this.client, e)))), e))) : void 0 } async edit(e, t = {}) { t.mentions && (!Array.isArray(t.mentions) && (t.mentions = [t.mentions]), t.mentions.some((e => e instanceof ae)) && (console.warn("Mentions with an array of Contact are now deprecated. See more at https://github.com/pedroslopez/whatsapp-web.js/pull/2166."), t.mentions = t.mentions.map((e => e.id._serialized)))), t.groupMentions && !Array.isArray(t.groupMentions) && (t.groupMentions = [t.groupMentions]); let i = { linkPreview: !1 !== t.linkPreview || void 0, mentionedJidList: t.mentions || [], groupMentions: t.groupMentions, extraOptions: t.extra }; if (!this.fromMe) return null; const a = await this.client.pupPage.evaluate((async (e, t, i) => { let a = window.SWA_Store.Msg.get(e); if (!a) return null; if (window.SWA_Store.MsgActionChecks.canEditText(a) || window.SWA_Store.MsgActionChecks.canEditCaption(a)) { return (await window.WWebJS.editMessage(a, t, i)).serialize() } return null }), this.id._serialized, e, i); return a ? new ne(this.client, a) : null } } class oe extends H { constructor(e, t) { super(e), t && this._patch(t) } _patch(e) { return this.id = e.id, this.name = e.formattedTitle, this.isGroup = e.isGroup, this.isReadOnly = e.isReadOnly, this.unreadCount = e.unreadCount, this.timestamp = e.t, this.archived = e.archive, this.pinned = !!e.pin, this.isMuted = e.isMuted, this.muteExpiration = e.muteExpiration, this.lastMessage = e.lastMessage ? new ne(super.client, e.lastMessage) : void 0, super._patch(e) } async sendMessage(e, t) { return this.client.sendMessage(this.id._serialized, e, t) } async sendSeen() { return this.client.sendSeen(this.id._serialized) } async archive() { return this.client.archiveChat(this.id._serialized) } async unarchive() { return this.client.unarchiveChat(this.id._serialized) } async pin() { return this.client.pinChat(this.id._serialized) } async unpin() { return this.client.unpinChat(this.id._serialized) } async mute(e) { return this.client.muteChat(this.id._serialized, e) } async unmute() { return this.client.unmuteChat(this.id._serialized) } async markUnread() { return this.client.markChatUnread(this.id._serialized) } async fetchMessages(e) { return (await this.client.pupPage.evaluate((async (e, t) => { const i = e => !e.isNotification && (!t || void 0 === t.fromMe || e.id.fromMe === t.fromMe), a = window.SWA_Store.Chat.get(e); let n = a.msgs.getModelsArray().filter(i); if (t && t.limit > 0) { for (; n.length < t.limit;) { const e = await window.SWA_Store.ConversationMsgs.loadEarlierMsgs(a); if (!e || !e.length) break; n = [...e.filter(i), ...n] } n.length > t.limit && (n.sort(((e, t) => e.t > t.t ? 1 : -1)), n = n.splice(n.length - t.limit)) } return n.map((e => window.WWebJS.getMessageModel(e))) }), this.id._serialized, e)).map((e => new ne(this.client, e))) } async sendStateTyping() { return this.client.pupPage.evaluate((e => (window.WWebJS.sendChatstate("typing", e), !0)), this.id._serialized) } async sendStateRecording() { return this.client.pupPage.evaluate((e => (window.WWebJS.sendChatstate("recording", e), !0)), this.id._serialized) } async clearState() { return this.client.pupPage.evaluate((e => (window.WWebJS.sendChatstate("stop", e), !0)), this.id._serialized) } async getContact() { return await this.client.getContactById(this.id._serialized) } async getLabels() { return this.client.getChatLabels(this.id._serialized) } async changeLabels(e) { return this.client.addOrRemoveLabels(e, [this.id._serialized]) } } class se extends oe { } class re extends oe { _patch(e) { return this.groupMetadata = e.groupMetadata, super._patch(e) } get owner() { return this.groupMetadata.owner } get createdAt() { return new Date(1e3 * this.groupMetadata.creation) } get description() { return this.groupMetadata.desc } get participants() { return this.groupMetadata.participants } async removeParticipants(e) { return await this.client.pupPage.evaluate((async (e, t) => { const i = window.SWA_Store.WidFactory.createWid(e), a = await window.SWA_Store.Chat.find(i), n = t.map((e => a.groupMetadata.participants.get(e))).filter((e => Boolean(e))); return await window.SWA_Store.GroupParticipants.removeParticipants(a, n), { status: 200 } }), this.id._serialized, e) } async promoteParticipants(e) { return await this.client.pupPage.evaluate((async (e, t) => { const i = window.SWA_Store.WidFactory.createWid(e), a = await window.SWA_Store.Chat.find(i), n = t.map((e => a.groupMetadata.participants.get(e))).filter((e => Boolean(e))); return await window.SWA_Store.GroupParticipants.promoteParticipants(a, n), { status: 200 } }), this.id._serialized, e) } async demoteParticipants(e) { return await this.client.pupPage.evaluate((async (e, t) => { const i = window.SWA_Store.WidFactory.createWid(e), a = await window.SWA_Store.Chat.find(i), n = t.map((e => a.groupMetadata.participants.get(e))).filter((e => Boolean(e))); return await window.SWA_Store.GroupParticipants.demoteParticipants(a, n), { status: 200 } }), this.id._serialized, e) } async deletePicture() { return await this.client.pupPage.evaluate((e => window.WWebJS.deletePicture(e)), this.id._serialized) } async setPicture(e) { return await this.client.pupPage.evaluate(((e, t) => window.WWebJS.setPicture(e, t)), this.id._serialized, e) } async getInviteCode() { return (await this.client.pupPage.evaluate((async e => { const t = window.SWA_Store.WidFactory.createWid(e); return window.SWA_Store.GroupInvite.queryGroupInviteCode(t) }), this.id._serialized)).code } async revokeInvite() { return (await this.client.pupPage.evaluate((e => { const t = window.SWA_Store.WidFactory.createWid(e); return window.SWA_Store.GroupInvite.resetGroupInviteCode(t) }), this.id._serialized)).code } async getGroupMembershipRequests() { return await this.client.getGroupMembershipRequests(this.id._serialized) } async approveGroupMembershipRequests(e = {}) { return await this.client.approveGroupMembershipRequests(this.id._serialized, e) } async rejectGroupMembershipRequests(e = {}) { return await this.client.rejectGroupMembershipRequests(this.id._serialized, e) } } const de = class { static create(e, t) { return t.isGroup ? new re(e, t) : new se(e, t) } }.create; class le extends ae { } class ce extends ae { _patch(e) { return this.businessProfile = e.businessProfile, super._patch(e) } } const ue = class { static create(e, t) { return t.isBusiness ? new ce(e, t) : new le(e, t) } }.create; class me extends H { constructor(e, t) { super(e), t && this._patch(t) } _patch(e) { return this.pushname = e.pushname, this.wid = e.wid, this.me = e.wid, this.phone = e.phone, this.platform = e.platform, super._patch(e) } async getBatteryStatus() { return await this.client.pupPage.evaluate((() => { const { battery: e, plugged: t } = window.SWA_Store.Conn; return { battery: e, plugged: t } })) } } class pe extends H { constructor(e, t) { super(e), t && this._patch(t) } _patch(e) { return this.id = e.id, this.body = e.body || "", this.type = e.subtype, this.timestamp = e.t, this.chatId = "object" == typeof e.id.remote ? e.id.remote._serialized : e.id.remote, this.author = "object" == typeof e.author ? e.author._serialized : e.author, this.recipientIds = [], e.recipients && (this.recipientIds = e.recipients), super._patch(e) } getChat() { return this.client.getChatById(this.chatId) } getContact() { return this.client.getContactById(this.author) } async getRecipients() { return await Promise.all(this.recipientIds.map((async e => await this.client.getContactById(e)))) } async reply(e, t = {}) { return this.client.sendMessage(this.chatId, e, t) } } class we extends H { constructor(e, t) { super(e), t && this._patch(t) } _patch(e) { this.id = e.id, this.name = e.name, this.hexColor = e.hexColor } async getChats() { return this.client.getChatsByLabelId(this.id) } } class he { constructor(e, t, i, a) { if (this.body = e, this.title = i, this.footer = a, e instanceof Q ? (this.type = "media", this.title = "") : this.type = "chat", this.buttons = this._format(t), !this.buttons.length) throw "[BT01] No buttons" } _format(e) { return (e = e.slice(0, 3)).map((e => ({ buttonId: e.id ? String(e.id) : d(6), buttonText: { displayText: e.body }, type: 1 }))) } } class ge { constructor(e, t, i, a, n) { this.description = e, this.buttonText = t, this.title = a, this.footer = n, this.sections = this._format(i) } _format(e) { if (!e.length) throw "[LT02] List without sections"; if (e.length > 1 && e.filter((e => void 0 === e.title)).length > 1) throw "[LT05] You can't have more than one empty title."; return e.map((e => { if (!e.rows.length) throw "[LT03] Section without rows"; return { title: e.title ? e.title : void 0, rows: e.rows.map((e => { if (!e.title) throw "[LT04] Row without title"; return { rowId: e.id ? e.id : d(6), title: e.title, description: e.description ? e.description : "" } })) } })) } } class fe { constructor(e, t, i = {}) { this.pollName = e.trim(), this.pollOptions = t.map(((e, t) => ({ name: e.trim(), localId: t }))), this.options = { allowMultipleAnswers: !0 === i.allowMultipleAnswers, messageSecret: i.messageSecret } } } (new class extends s { constructor(e = {}) { super(), this.options = function (e, t) { if (!t) return e; for (const n in e) i = t, a = n, Object.prototype.hasOwnProperty.call(i, a) && void 0 !== t[n] ? t[n] === Object(t[n]) && (t[n] = Util.mergeDefault(e[n], t[n])) : t[n] = e[n]; var i, a; return t }(u, e), this.pupPage = r.Page, this.currentIndexHtml = null, this.lastLoggedOut = !1 } async inject(e = !1) { await this.pupPage.waitForFunction((() => { var e; return null != (null == (e = window.Debug) ? void 0 : e.VERSION) }), { timeout: this.options.authTimeoutMs }), await this.pupPage.evaluate(D); const t = await this.pupPage.evaluate((async () => { let e = window.SWA_AuthStore.AppState.state; return "OPENING" !== e && "UNLAUNCHED" !== e && "PAIRING" !== e || await new Promise((e => { window.SWA_AuthStore.AppState.on("change:state", (function t(i, a) { "OPENING" !== a && "UNLAUNCHED" !== a && "PAIRING" !== a && (window.SWA_AuthStore.AppState.off("change:state", t), e()) })) })), e = window.SWA_AuthStore.AppState.state, "UNPAIRED" == e || "UNPAIRED_IDLE" == e })); console.log("is authentication needed", t), t && console.log("authentication needed"), e || (await this.pupPage.exposeFunction("onAuthAppStateChangedEvent", (async e => { })), await this.pupPage.exposeFunction("onAppStateHasSyncedEvent", (async () => { await this.pupPage.evaluate((async () => void 0 !== window.SWA_Store && void 0 !== window.WWebJS)) || (await new Promise((e => setTimeout(e, 1e3))), await this.pupPage.evaluate(V), await this.pupPage.waitForFunction((() => null != window.SWA_Store)), this.info = new me(this, await this.pupPage.evaluate((() => ({ ...window.SWA_Store.Conn.serialize(), wid: window.SWA_Store.User.getMaybeMePnUser })))), this.interface = new c(this), await this.pupPage.evaluate(K), await this.attachEventListeners(e), e = !0), this.emit(m) })), await this.pupPage.exposeFunction("onOfflineProgressUpdateEvent", (async e => { this.emit(P, e, "WhatsApp") }))), await this.pupPage.evaluate((() => { window.SWA_AuthStore.AppState.on("change:state", ((e, t) => { window.onAuthAppStateChangedEvent(t) })), window.SWA_AuthStore.AppState.on("change:hasSynced", (() => { window.onAppStateHasSyncedEvent() })), window.SWA_AuthStore.Cmd.on("offline_progress_update", (() => { window.onOfflineProgressUpdateEvent(window.SWA_AuthStore.OfflineMessageHandler.getOfflineDeliveryProgress()) })) })) } async initialize() { await this.inject() } async requestPairingCode(e, t = !0) { return await this.pupPage.evaluate((async (e, t) => (window.SWA_AuthStore.PairingCodeLinkUtils.setPairingType("ALT_DEVICE_LINKING"), await window.SWA_AuthStore.PairingCodeLinkUtils.initializeAltDeviceLinking(), window.SWA_AuthStore.PairingCodeLinkUtils.startAltLinkingFlow(e, t))), e, t) } async attachEventListeners(e = !1) { if (!e) { let e; await this.pupPage.exposeFunction("onAddMessageEvent", (e => { if ("gp2" === e.type) { const t = new pe(this, e); return void (["add", "invite", "linked_group_join"].includes(e.subtype) ? this.emit(C, t) : "remove" === e.subtype || "leave" === e.subtype ? this.emit(T, t) : "promote" === e.subtype || "demote" === e.subtype ? this.emit(x, t) : "created_membership_requests" === e.subtype ? this.emit(O, t) : this.emit(G, t)) } const t = new ne(this, e); this.emit(f, t), e.id.fromMe || this.emit(h, t) })), await this.pupPage.exposeFunction("onChangeMessageTypeEvent", (t => { if ("revoked" === t.type) { const i = new ne(this, t); let a; e && t.id.id === e.id.id && (a = new ne(this, e)), this.emit(b, i, a) } })), await this.pupPage.exposeFunction("onChangeMessageEvent", (t => { "revoked" !== t.type && (e = t); const i = "gp2" === t.type && "modify" === t.subtype, a = "notification_template" === t.type && "change_number" === t.subtype; if (i || a) { const e = new ne(this, t), n = i ? t.recipients[0] : t.to, o = i ? t.author : t.templateParams.find((e => e !== n)); this.emit(v, e, o, n, a) } })), await this.pupPage.exposeFunction("onRemoveMessageEvent", (e => { if (!e.isNewMsg) return; const t = new ne(this, e); this.emit(y, t) })), await this.pupPage.exposeFunction("onMessageAckEvent", ((e, t) => { const i = new ne(this, e); this.emit(S, i, t) })), await this.pupPage.exposeFunction("onChatUnreadCountEvent", (async e => { const t = await this.getChatById(e.id); this.emit(_, t) })), await this.pupPage.exposeFunction("onMessageMediaUploadedEvent", (e => { const t = new ne(this, e); this.emit(M, t) })), await this.pupPage.exposeFunction("onAppStateChangedEvent", (async e => { this.emit(k, e); const t = [F, z, J, U]; this.options.takeoverOnConflict && (t.push(q), e === q && setTimeout((() => { this.pupPage.evaluate((() => window.SWA_Store.AppState.takeover())) }), this.options.takeoverTimeoutMs)), t.includes(e) || (this.emit(E, e), this.destroy()) })), await this.pupPage.exposeFunction("onReaction", (e => { for (const t of e) this.emit(W, new ie(this, t)) })), await this.pupPage.exposeFunction("onRemoveChatEvent", (async e => { const t = await this.getChatById(e.id); this.emit(p, t) })), await this.pupPage.exposeFunction("onArchiveChatEvent", (async (e, t, i) => { const a = await this.getChatById(e.id); this.emit(w, a, t, i) })), await this.pupPage.exposeFunction("onEditMessageEvent", ((e, t, i) => { "revoked" !== e.type && this.emit(A, new ne(this, e), t, i) })), await this.pupPage.exposeFunction("onAddMessageCiphertextEvent", (e => { this.emit(g, new ne(this, e)) })) } await this.pupPage.evaluate((() => { window.SWA_Store.Msg.on("change:ack", ((e, t) => { window.onMessageAckEvent(window.WWebJS.getMessageModel(e), t) })) })) } async destroy() { } async logout() { await this.pupPage.evaluate((() => window.SWA_Store.AppState.logout())) } async getWWebVersion() { return await this.pupPage.evaluate((() => window.Debug.VERSION)) } async sendSeen(e) { return await this.pupPage.evaluate((async e => window.WWebJS.sendSeen(e)), e) } async sendMessage(e, t, i = {}) { i.mentions && (!Array.isArray(i.mentions) && (i.mentions = [i.mentions]), i.mentions.some((e => e instanceof ae)) && (console.warn("Mentions with an array of Contact are now deprecated. See more at https://github.com/pedroslopez/whatsapp-web.js/pull/2166."), i.mentions = i.mentions.map((e => e.id._serialized)))), i.groupMentions && !Array.isArray(i.groupMentions) && (i.groupMentions = [i.groupMentions]); let a = { linkPreview: !1 !== i.linkPreview || void 0, sendAudioAsVoice: i.sendAudioAsVoice, sendVideoAsGif: i.sendVideoAsGif, sendMediaAsSticker: i.sendMediaAsSticker, sendMediaAsDocument: i.sendMediaAsDocument, caption: i.caption, quotedMessageId: i.quotedMessageId, parseVCards: !1 !== i.parseVCards, mentionedJidList: i.mentions || [], groupMentions: i.groupMentions, extraOptions: i.extra }; const n = void 0 === i.sendSeen || i.sendSeen; t instanceof Q ? (a.attachment = t, a.isViewOnce = i.isViewOnce, t = "") : i.media instanceof Q ? (a.attachment = i.media, a.caption = t, a.isViewOnce = i.isViewOnce, t = "") : t instanceof $ ? (a.location = t, t = "") : t instanceof fe ? (a.poll = t, t = "") : t instanceof ae ? (a.contactCard = t.id._serialized, t = "") : Array.isArray(t) && t.length > 0 && t[0] instanceof ae ? (a.contactCardList = t.map((e => e.id._serialized)), t = "") : t instanceof he ? ("chat" !== t.type && (a.attachment = t.body), a.buttons = t, t = "") : t instanceof ge && (a.list = t, t = ""), a.sendMediaAsSticker && a.attachment && (a.attachment = await formatToWebpSticker(a.attachment, { name: i.stickerName, author: i.stickerAuthor, categories: i.stickerCategories }, this.pupPage)); const o = await this.pupPage.evaluate((async (e, t, i, a) => { const n = window.SWA_Store.WidFactory.createWid(e), o = await window.SWA_Store.Chat.find(n); a && await window.WWebJS.sendSeen(e); const s = await window.WWebJS.sendMessage(o, t, i, a); return window.WWebJS.getMessageModel(s) }), e, t, a, n); return new ne(this, o) } async searchMessages(e, t = {}) { return (await this.pupPage.evaluate((async (e, t, i, a) => { const { messages: n } = await window.SWA_Store.Msg.search(e, t, i, a); return n.map((e => window.WWebJS.getMessageModel(e))) }), e, t.page, t.limit, t.chatId)).map((e => new ne(this, e))) } async getChats() { return (await this.pupPage.evaluate((async () => await window.WWebJS.getChats()))).map((e => de(this, e))) } async getChatById(e) { let t = await this.pupPage.evaluate((async e => await window.WWebJS.getChat(e)), e); return de(this, t) } async getContacts() { return (await this.pupPage.evaluate((() => window.WWebJS.getContacts()))).map((e => ue(this, e))) } async getContactById(e) { let t = await this.pupPage.evaluate((e => window.WWebJS.getContact(e)), e); return ue(this, t) } async getMessageById(e) { const t = await this.pupPage.evaluate((async e => { let t = window.SWA_Store.Msg.get(e); if (t) return window.WWebJS.getMessageModel(t); if (3 !== e.split("_").length) throw new Error("Invalid serialized message id specified"); let i = await window.SWA_Store.Msg.getMessagesById([e]); return i && i.messages.length && (t = i.messages[0]), t ? window.WWebJS.getMessageModel(t) : void 0 }), e); return t ? new ne(this, t) : null } async getInviteInfo(e) { return await this.pupPage.evaluate((e => window.SWA_Store.GroupInvite.queryGroupInvite(e)), e) } async acceptInvite(e) { return (await this.pupPage.evaluate((async e => await window.SWA_Store.GroupInvite.joinGroupViaInvite(e)), e)).gid._serialized } async getState() { return await this.pupPage.evaluate((() => window.SWA_Store ? window.SWA_Store.AppState.state : null)) } async archiveChat(e) { return await this.pupPage.evaluate((async e => { let t = await window.SWA_Store.Chat.get(e); return await window.SWA_Store.Cmd.archiveChat(t, !0), !0 }), e) } async unarchiveChat(e) { return await this.pupPage.evaluate((async e => { let t = await window.SWA_Store.Chat.get(e); return await window.SWA_Store.Cmd.archiveChat(t, !1), !1 }), e) } async pinChat(e) { return this.pupPage.evaluate((async e => { let t = window.SWA_Store.Chat.get(e); if (t.pin) return !0; const i = window.SWA_Store.Chat.getModelsArray(); if (i.length > 3) { if (i[2].pin) return !1 } return await window.SWA_Store.Cmd.pinChat(t, !0), !0 }), e) } async unpinChat(e) { return this.pupPage.evaluate((async e => { let t = window.SWA_Store.Chat.get(e); return !!t.pin && (await window.SWA_Store.Cmd.pinChat(t, !1), !1) }), e) } async muteChat(e, t) { t = t ? t.getTime() / 1e3 : -1, await this.pupPage.evaluate((async (e, t) => { let i = await window.SWA_Store.Chat.get(e); await i.mute.mute({ expiration: t, sendDevice: !0 }) }), e, t || -1) } async unmuteChat(e) { await this.pupPage.evaluate((async e => { let t = await window.SWA_Store.Chat.get(e); await window.SWA_Store.Cmd.muteChat(t, !1) }), e) } async markChatUnread(e) { await this.pupPage.evaluate((async e => { let t = await window.SWA_Store.Chat.get(e); await window.SWA_Store.Cmd.markChatUnread(t, !0) }), e) } async getCommonGroups(e) { const t = await this.pupPage.evaluate((async e => { let t = window.SWA_Store.Contact.get(e); if (!t) { const i = window.SWA_Store.WidFactory.createUserWid(e); t = new (0, window.SWA_Store.Contact.getModelsArray().find((e => !e.isGroup)).constructor)({ id: i }) } if (t.commonGroups) return t.commonGroups.serialize(); return await window.SWA_Store.findCommonGroups(t) ? t.commonGroups.serialize() : [] }), e), i = []; for (const a of t) i.push(a.id); return i } async resetState() { await this.pupPage.evaluate((() => { window.SWA_Store.AppState.phoneWatchdog.shiftTimer.forceRunNow() })) } async isRegisteredUser(e) { return Boolean(await this.getNumberId(e)) } async getNumberId(e, t) { var i; e = String(e).replace("@c.us", ""); const a = (() => { var e; try { return !!(null == (e = window.require("WAComms")) ? void 0 : e.getComms()) } catch (t) { return !0 } })(); try { a || await (null == (i = require("WAWebStartBackend")) ? void 0 : i.startBackend()) } catch (n) { } return await this.pupPage.evaluate((async e => { let i = l(e, t); e = i.number, (t = i.countryCode) || (t = window.SWA_Store.PhoneFindCC.findCC(e), e = e.substring(t.length)); let a = await window.SWA_Store.PhoneNumberFormatUtils.isPhoneNumberValid(Number(t), e); if (a || (i = l(e, t), e = i.number, t = i.countryCode), 975 != Number(t) && (xe("Checking for valid number", t, e), a = await window.SWA_Store.PhoneNumberFormatUtils.isPhoneNumberValid(Number(t), e), !a)) return null; const n = await window.SWA_Store.QueryExistJob.queryPhoneExists(`+${i.fullNumber}`); return n && void 0 !== n.wid ? n.wid : null }), e) } async getFormattedNumber(e) { return e.endsWith("@s.whatsapp.net") || (e = e.replace("c.us", "s.whatsapp.net")), e.includes("@s.whatsapp.net") || (e = `${e}@s.whatsapp.net`), await this.pupPage.evaluate((async e => window.SWA_Store.NumberInfo.formattedPhoneNumber(e)), e) } async getCountryCode(e) { return e = e.replace(" ", "").replace("+", "").replace("@c.us", ""), await this.pupPage.evaluate((async e => window.SWA_Store.NumberInfo.findCC ? window.SWA_Store.NumberInfo.findCC(e) : window.SWA_Store.PhoneFindCC.findCC(e)), e) } async getLabels() { return (await this.pupPage.evaluate((async () => window.WWebJS.getLabels()))).map((e => new we(this, e))) } async getLabelById(e) { const t = await this.pupPage.evaluate((async e => window.WWebJS.getLabel(e)), e); return new we(this, t) } async getChatLabels(e) { return (await this.pupPage.evaluate((async e => window.WWebJS.getChatLabels(e)), e)).map((e => new we(this, e))) } async getChatsByLabelId(e) { const t = await this.pupPage.evaluate((async e => window.SWA_Store.Label.get(e).labelItemCollection.getModelsArray().reduce(((e, t) => ("Chat" === t.parentType && e.push(t.parentId), e)), [])), e); return Promise.all(t.map((e => this.getChatById(e)))) } async getBlockedContacts() { return (await this.pupPage.evaluate((() => { let e = window.SWA_Store.Blocklist.getModelsArray().map((e => e.id._serialized)); return Promise.all(e.map((e => window.WWebJS.getContact(e)))) }))).map((e => ue(this.client, e))) } async setProfilePicture(e) { return await this.pupPage.evaluate(((e, t) => window.WWebJS.setPicture(e, t)), this.info.wid._serialized, e) } async deleteProfilePicture() { return await this.pupPage.evaluate((e => window.WWebJS.deletePicture(e)), this.info.wid._serialized) } async addOrRemoveLabels(e, t) { return this.pupPage.evaluate((async (e, t) => { if (-1 === ["smba", "smbi"].indexOf(window.SWA_Store.Conn.platform)) throw "[LT01] Only Whatsapp business"; const i = window.WWebJS.getLabels().filter((t => void 0 !== e.find((e => e == t.id)))), a = window.SWA_Store.Chat.filter((e => t.includes(e.id._serialized))); let n = i.map((e => ({ id: e.id, type: "add" }))); return a.forEach((e => { (e.labels || []).forEach((e => { n.find((t => t.id == e)) || n.push({ id: e, type: "remove" }) })) })), await window.SWA_Store.Label.addOrRemoveLabels(n, a) }), e, t) } async getGroupMembershipRequests(e) { return await this.pupPage.evaluate((async e => { const t = window.SWA_Store.WidFactory.createWid(e); return await window.SWA_Store.MembershipRequestUtils.getMembershipApprovalRequests(t) }), e) } }).on("message_ack", (e => { xe("Got acknolegement", e.ack, e); const t = new CustomEvent("msg_ack", { detail: { id: e.id.id, msg: e.body, ack: e.ack } }); document.body.dispatchEvent(t) })); const be = { number: "", CCode: "", phoneNumber: "", userName: "" }; const ye = class e { static async storage(t) { if (t.set) return void (await Ae({ requestKey: "fetchData-" + __privateWrapper(e, i)._++, data: { action: "storage", set: t.set } })); return await Ae({ requestKey: "fetchData-" + __privateWrapper(e, i)._++, data: { action: "storage", get: t.get } }) } }; i = new WeakMap, __privateAdd(ye, i, 1), __publicField(ye, "get", (async (e, t) => { const a = await Ae({ requestKey: "fetchData-" + __privateWrapper(ye, i)._++, data: { action: "fetchData", data: { url: e, method: "GET", token: null == t ? void 0 : t.token, retryLimit: null == t ? void 0 : t.retryLimit } } }), n = "FetchDataTimeout" == (null == a ? void 0 : a.name), o = "AxiosError" == (null == a ? void 0 : a.name); if (n || o) throw a; return a })), __publicField(ye, "post", (async (e, t, a) => { console.log("post", e, t, a); const n = be, o = (null == a ? void 0 : a.addNumber) && n ? { phoneNumber: n.phoneNumber, CCode: n.CCode, ...t } : t, s = await Ae({ requestKey: "fetchData-" + __privateWrapper(ye, i)._++, data: { action: "fetchData", data: { url: e, method: "POST", body: o, token: null == a ? void 0 : a.token, retryLimit: null == a ? void 0 : a.retryLimit } } }), r = "FetchDataTimeout" == (null == s ? void 0 : s.name), d = "AxiosError" == (null == s ? void 0 : s.name); if (r || d) throw s; return s })), __publicField(ye, "upload_contact_list", (async e => { console.log("upload_contact_list", e); const t = await Ae({ requestKey: "fetchData-" + __privateWrapper(ye, i)._++, data: { action: "upload_contact_list", data: { body: e } } }), a = "FetchDataTimeout" == (null == t ? void 0 : t.name), n = "AxiosError" == (null == t ? void 0 : t.name); if (a || n) throw t; return t })), __publicField(ye, "put", (async (e, t, a) => { const n = await Ae({ requestKey: "fetchData-" + __privateWrapper(ye, i)._++, data: { action: "fetchData", data: { url: e, method: "PUT", body: t, token: null == a ? void 0 : a.token, retryLimit: null == a ? void 0 : a.retryLimit } } }), o = "FetchDataTimeout" == (null == n ? void 0 : n.name), s = "AxiosError" == (null == n ? void 0 : n.name); if (o || s) throw n; return n })), __publicField(ye, "delete", (async (e, t, a) => { const n = await Ae({ requestKey: "fetchData-" + __privateWrapper(ye, i)._++, data: { action: "fetchData", data: { url: e, method: "DELETE", body: t, token: null == a ? void 0 : a.token, retryLimit: null == a ? void 0 : a.retryLimit } } }), o = "FetchDataTimeout" == (null == n ? void 0 : n.name), s = "AxiosError" == (null == n ? void 0 : n.name); if (o || s) throw n; return n })), __publicField(ye, "logout", (async () => await Ae({ requestKey: "fetchData-" + __privateWrapper(ye, i)._++, data: { action: "logout" } }))), __publicField(ye, "screenLock", (async e => await Ae({ requestKey: "fetchData-" + __privateWrapper(ye, i)._++, data: { action: "screenLock", data: { freeScreen: !!(null == e ? void 0 : e.freeScreen) } } }))); let Se = ye; function Ae(e) { return new Promise(((t, i) => { const a = setTimeout((() => { document.body.removeEventListener("connect_sheet_wa_receive", n), i({ name: "FetchDataTimeout", message: "Request timed out", requests: e }) }), 3e4), n = i => { const o = i.detail; o.requestKey === e.requestKey && (t(o.response), document.body.removeEventListener("connect_sheet_wa_receive", n), clearTimeout(a)) }; document.body.addEventListener("connect_sheet_wa_receive", n); const o = new CustomEvent("connect_sheet_wa_sent", { detail: { data: JSON.stringify(e.data), requestKey: e.requestKey } }); document.body.dispatchEvent(o) })) } const _e = class e { constructor() { __publicField(this, "_debugMode", !1) } static getInstance() { return e.instance || (e.instance = new e), e.instance } get debugMode() { return this._debugMode } set debugMode(e) { this._debugMode = e } }; __publicField(_e, "instance"); let We = _e; function Me(e) { return chrome.runtime.sendMessage(chrome.runtime.id, e) } function ve(e) { return new Promise((t => setTimeout(t, e))) } let Ce = []; const Te = 5; function xe(...e) { const t = We.getInstance(); if (self.showLogs && console.log(...e), t.debugMode && (Ce.push(e), Ce.length >= Te)) try { Se.post(`${o}/save-error-logs`, { token: !0, data: { message: Ce } }), Ce = [] } catch (i) { console.log("error in log", i) } } const Oe = { 91: { abbr: "IN", timeZone: "Asia/Kolkata", emoji: "🇮🇳", gmtOffset: "GMT+5.5" }, 86: { abbr: "CN", timeZone: "Asia/Shanghai", emoji: "🇨🇳", gmtOffset: "GMT+8" }, 81: { abbr: "JP", timeZone: "Asia/Tokyo", emoji: "🇯🇵", gmtOffset: "GMT+9" }, 82: { abbr: "KR", timeZone: "Asia/Seoul", emoji: "🇰🇷", gmtOffset: "GMT+9" }, 84: { abbr: "VN", timeZone: "Asia/Ho_Chi_Minh", emoji: "🇻🇳", gmtOffset: "GMT+7" }, 66: { abbr: "TH", timeZone: "Asia/Bangkok", emoji: "🇹🇭", gmtOffset: "GMT+7" }, 62: { abbr: "ID", timeZone: "Asia/Jakarta", emoji: "🇮🇩", gmtOffset: "GMT+7" }, 60: { abbr: "MY", timeZone: "Asia/Kuala_Lumpur", emoji: "🇲🇾", gmtOffset: "GMT+8" }, 65: { abbr: "SG", timeZone: "Asia/Singapore", emoji: "🇸🇬", gmtOffset: "GMT+8" }, 63: { abbr: "PH", timeZone: "Asia/Manila", emoji: "🇵🇭", gmtOffset: "GMT+8" }, 92: { abbr: "PK", timeZone: "Asia/Karachi", emoji: "🇵🇰", gmtOffset: "GMT+5" }, 880: { abbr: "BD", timeZone: "Asia/Dhaka", emoji: "🇧🇩", gmtOffset: "GMT+6" }, 94: { abbr: "LK", timeZone: "Asia/Colombo", emoji: "🇱🇰", gmtOffset: "GMT+5.5" }, 95: { abbr: "MM", timeZone: "Asia/Yangon", emoji: "🇲🇲", gmtOffset: "GMT+6.5" }, 977: { abbr: "NP", timeZone: "Asia/Kathmandu", emoji: "🇳🇵", gmtOffset: "GMT+5.75" }, 976: { abbr: "MN", timeZone: "Asia/Ulaanbaatar", emoji: "🇲🇳", gmtOffset: "GMT+8" }, 7: { abbr: "RU", timeZone: "Europe/Moscow", emoji: "🇷🇺", gmtOffset: "GMT+3" }, 971: { abbr: "AE", timeZone: "Asia/Dubai", emoji: "🇦🇪", gmtOffset: "GMT+4" }, 966: { abbr: "SA", timeZone: "Asia/Riyadh", emoji: "🇸🇦", gmtOffset: "GMT+3" }, 972: { abbr: "IL", timeZone: "Asia/Jerusalem", emoji: "🇮🇱", gmtOffset: "GMT+2" }, 962: { abbr: "JO", timeZone: "Asia/Amman", emoji: "🇯🇴", gmtOffset: "GMT+2" }, 961: { abbr: "LB", timeZone: "Asia/Beirut", emoji: "🇱🇧", gmtOffset: "GMT+2" }, 964: { abbr: "IQ", timeZone: "Asia/Baghdad", emoji: "🇮🇶", gmtOffset: "GMT+3" }, 98: { abbr: "IR", timeZone: "Asia/Tehran", emoji: "🇮🇷", gmtOffset: "GMT+3.5" }, 90: { abbr: "TR", timeZone: "Europe/Istanbul", emoji: "🇹🇷", gmtOffset: "GMT+3" }, 973: { abbr: "BH", timeZone: "Asia/Bahrain", emoji: "🇧🇭", gmtOffset: "GMT+3" }, 974: { abbr: "QA", timeZone: "Asia/Qatar", emoji: "🇶🇦", gmtOffset: "GMT+3" }, 965: { abbr: "KW", timeZone: "Asia/Kuwait", emoji: "🇰🇼", gmtOffset: "GMT+3" }, 968: { abbr: "OM", timeZone: "Asia/Muscat", emoji: "🇴🇲", gmtOffset: "GMT+4" }, 93: { abbr: "AF", timeZone: "Asia/Kabul", emoji: "🇦🇫", gmtOffset: "GMT+4.5" }, 992: { abbr: "TJ", timeZone: "Asia/Dushanbe", emoji: "🇹🇯", gmtOffset: "GMT+5" }, 993: { abbr: "TM", timeZone: "Asia/Ashgabat", emoji: "🇹🇲", gmtOffset: "GMT+5" }, 998: { abbr: "UZ", timeZone: "Asia/Tashkent", emoji: "🇺🇿", gmtOffset: "GMT+5" }, 996: { abbr: "KG", timeZone: "Asia/Bishkek", emoji: "🇰🇬", gmtOffset: "GMT+6" }, 856: { abbr: "LA", timeZone: "Asia/Vientiane", emoji: "🇱🇦", gmtOffset: "GMT+7" }, 855: { abbr: "KH", timeZone: "Asia/Phnom_Penh", emoji: "🇰🇭", gmtOffset: "GMT+7" }, 673: { abbr: "BN", timeZone: "Asia/Brunei", emoji: "🇧🇳", gmtOffset: "GMT+8" }, 853: { abbr: "MO", timeZone: "Asia/Macau", emoji: "🇲🇴", gmtOffset: "GMT+8" }, 852: { abbr: "HK", timeZone: "Asia/Hong_Kong", emoji: "🇭🇰", gmtOffset: "GMT+8" }, 886: { abbr: "TW", timeZone: "Asia/Taipei", emoji: "🇹🇼", gmtOffset: "GMT+8" }, 670: { abbr: "TL", timeZone: "Asia/Dili", emoji: "🇹🇱", gmtOffset: "GMT+9" }, 44: { abbr: "UK", timeZone: "Europe/London", emoji: "🇬🇧", gmtOffset: "GMT+0" }, 33: { abbr: "FR", timeZone: "Europe/Paris", emoji: "🇫🇷", gmtOffset: "GMT+1" }, 49: { abbr: "DE", timeZone: "Europe/Berlin", emoji: "🇩🇪", gmtOffset: "GMT+1" }, 39: { abbr: "IT", timeZone: "Europe/Rome", emoji: "🇮🇹", gmtOffset: "GMT+1" }, 34: { abbr: "ES", timeZone: "Europe/Madrid", emoji: "🇪🇸", gmtOffset: "GMT+1" }, 31: { abbr: "NL", timeZone: "Europe/Amsterdam", emoji: "🇳🇱", gmtOffset: "GMT+1" }, 32: { abbr: "BE", timeZone: "Europe/Brussels", emoji: "🇧🇪", gmtOffset: "GMT+1" }, 41: { abbr: "CH", timeZone: "Europe/Zurich", emoji: "🇨🇭", gmtOffset: "GMT+1" }, 46: { abbr: "SE", timeZone: "Europe/Stockholm", emoji: "🇸🇪", gmtOffset: "GMT+1" }, 47: { abbr: "NO", timeZone: "Europe/Oslo", emoji: "🇳🇴", gmtOffset: "GMT+1" }, 45: { abbr: "DK", timeZone: "Europe/Copenhagen", emoji: "🇩🇰", gmtOffset: "GMT+1" }, 358: { abbr: "FI", timeZone: "Europe/Helsinki", emoji: "🇫🇮", gmtOffset: "GMT+2" }, 48: { abbr: "PL", timeZone: "Europe/Warsaw", emoji: "🇵🇱", gmtOffset: "GMT+1" }, 43: { abbr: "AT", timeZone: "Europe/Vienna", emoji: "🇦🇹", gmtOffset: "GMT+1" }, 36: { abbr: "HU", timeZone: "Europe/Budapest", emoji: "🇭🇺", gmtOffset: "GMT+1" }, 30: { abbr: "GR", timeZone: "Europe/Athens", emoji: "🇬🇷", gmtOffset: "GMT+2" }, 40: { abbr: "RO", timeZone: "Europe/Bucharest", emoji: "🇷🇴", gmtOffset: "GMT+2" }, 351: { abbr: "PT", timeZone: "Europe/Lisbon", emoji: "🇵🇹", gmtOffset: "GMT+0" }, 353: { abbr: "IE", timeZone: "Europe/Dublin", emoji: "🇮🇪", gmtOffset: "GMT+0" }, 420: { abbr: "CZ", timeZone: "Europe/Prague", emoji: "🇨🇿", gmtOffset: "GMT+1" }, 421: { abbr: "SK", timeZone: "Europe/Bratislava", emoji: "🇸🇰", gmtOffset: "GMT+1" }, 386: { abbr: "SI", timeZone: "Europe/Ljubljana", emoji: "🇸🇮", gmtOffset: "GMT+1" }, 385: { abbr: "HR", timeZone: "Europe/Zagreb", emoji: "🇭🇷", gmtOffset: "GMT+1" }, 381: { abbr: "RS", timeZone: "Europe/Belgrade", emoji: "🇷🇸", gmtOffset: "GMT+1" }, 359: { abbr: "BG", timeZone: "Europe/Sofia", emoji: "🇧🇬", gmtOffset: "GMT+2" }, 356: { abbr: "MT", timeZone: "Europe/Malta", emoji: "🇲🇹", gmtOffset: "GMT+1" }, 370: { abbr: "LT", timeZone: "Europe/Vilnius", emoji: "🇱🇹", gmtOffset: "GMT+2" }, 371: { abbr: "LV", timeZone: "Europe/Riga", emoji: "🇱🇻", gmtOffset: "GMT+2" }, 372: { abbr: "EE", timeZone: "Europe/Tallinn", emoji: "🇪🇪", gmtOffset: "GMT+2" }, 354: { abbr: "IS", timeZone: "Atlantic/Reykjavik", emoji: "🇮🇸", gmtOffset: "GMT+0" }, 380: { abbr: "UA", timeZone: "Europe/Kiev", emoji: "🇺🇦", gmtOffset: "GMT+2" }, 375: { abbr: "BY", timeZone: "Europe/Minsk", emoji: "🇧🇾", gmtOffset: "GMT+3" }, 373: { abbr: "MD", timeZone: "Europe/Chisinau", emoji: "🇲🇩", gmtOffset: "GMT+2" }, 352: { abbr: "LU", timeZone: "Europe/Luxembourg", emoji: "🇱🇺", gmtOffset: "GMT+1" }, 377: { abbr: "MC", timeZone: "Europe/Monaco", emoji: "🇲🇨", gmtOffset: "GMT+1" }, 378: { abbr: "SM", timeZone: "Europe/San_Marino", emoji: "🇸🇲", gmtOffset: "GMT+1" }, 379: { abbr: "VA", timeZone: "Europe/Vatican", emoji: "🇻🇦", gmtOffset: "GMT+1" }, 382: { abbr: "ME", timeZone: "Europe/Podgorica", emoji: "🇲🇪", gmtOffset: "GMT+1" }, 383: { abbr: "XK", timeZone: "Europe/Belgrade", emoji: "🇽🇰", gmtOffset: "GMT+1" }, 355: { abbr: "AL", timeZone: "Europe/Tirane", emoji: "🇦🇱", gmtOffset: "GMT+1" }, 387: { abbr: "BA", timeZone: "Europe/Sarajevo", emoji: "🇧🇦", gmtOffset: "GMT+1" }, 389: { abbr: "MK", timeZone: "Europe/Skopje", emoji: "🇲🇰", gmtOffset: "GMT+1" }, 1: { abbr: "US", timeZone: "America/New_York", emoji: "🇺🇸", gmtOffset: "GMT-5" }, "1_CA": { abbr: "CA", timeZone: "America/Toronto", emoji: "🇨🇦", gmtOffset: "GMT-5" }, 52: { abbr: "MX", timeZone: "America/Mexico_City", emoji: "🇲🇽", gmtOffset: "GMT-6" }, 502: { abbr: "GT", timeZone: "America/Guatemala", emoji: "🇬🇹", gmtOffset: "GMT-6" }, 503: { abbr: "SV", timeZone: "America/El_Salvador", emoji: "🇸🇻", gmtOffset: "GMT-6" }, 504: { abbr: "HN", timeZone: "America/Tegucigalpa", emoji: "🇭🇳", gmtOffset: "GMT-6" }, 505: { abbr: "NI", timeZone: "America/Managua", emoji: "🇳🇮", gmtOffset: "GMT-6" }, 506: { abbr: "CR", timeZone: "America/Costa_Rica", emoji: "🇨🇷", gmtOffset: "GMT-6" }, 507: { abbr: "PA", timeZone: "America/Panama", emoji: "🇵🇦", gmtOffset: "GMT-5" }, "1_JM": { abbr: "JM", timeZone: "America/Jamaica", emoji: "🇯🇲", gmtOffset: "GMT-5" }, "1_BS": { abbr: "BS", timeZone: "America/Nassau", emoji: "🇧🇸", gmtOffset: "GMT-5" }, "1_BB": { abbr: "BB", timeZone: "America/Barbados", emoji: "🇧🇧", gmtOffset: "GMT-4" }, "1_TT": { abbr: "TT", timeZone: "America/Port_of_Spain", emoji: "🇹🇹", gmtOffset: "GMT-4" }, 509: { abbr: "HT", timeZone: "America/Port-au-Prince", emoji: "🇭🇹", gmtOffset: "GMT-5" }, 53: { abbr: "CU", timeZone: "America/Havana", emoji: "🇨🇺", gmtOffset: "GMT-5" }, 501: { abbr: "BZ", timeZone: "America/Belize", emoji: "🇧🇿", gmtOffset: "GMT-6" }, "1_PR": { abbr: "PR", timeZone: "America/Puerto_Rico", emoji: "🇵🇷", gmtOffset: "GMT-4" }, 55: { abbr: "BR", timeZone: "America/Sao_Paulo", emoji: "🇧🇷", gmtOffset: "GMT-3" }, 54: { abbr: "AR", timeZone: "America/Argentina/Buenos_Aires", emoji: "🇦🇷", gmtOffset: "GMT-3" }, 56: { abbr: "CL", timeZone: "America/Santiago", emoji: "🇨🇱", gmtOffset: "GMT-4" }, 57: { abbr: "CO", timeZone: "America/Bogota", emoji: "🇨🇴", gmtOffset: "GMT-5" }, 51: { abbr: "PE", timeZone: "America/Lima", emoji: "🇵🇪", gmtOffset: "GMT-5" }, 58: { abbr: "VE", timeZone: "America/Caracas", emoji: "🇻🇪", gmtOffset: "GMT-4" }, 593: { abbr: "EC", timeZone: "America/Guayaquil", emoji: "🇪🇨", gmtOffset: "GMT-5" }, 591: { abbr: "BO", timeZone: "America/La_Paz", emoji: "🇧🇴", gmtOffset: "GMT-4" }, 595: { abbr: "PY", timeZone: "America/Asuncion", emoji: "🇵🇾", gmtOffset: "GMT-4" }, 598: { abbr: "UY", timeZone: "America/Montevideo", emoji: "🇺🇾", gmtOffset: "GMT-3" }, 592: { abbr: "GY", timeZone: "America/Guyana", emoji: "🇬🇾", gmtOffset: "GMT-4" }, 597: { abbr: "SR", timeZone: "America/Paramaribo", emoji: "🇸🇷", gmtOffset: "GMT-3" }, 594: { abbr: "GF", timeZone: "America/Cayenne", emoji: "🇬🇫", gmtOffset: "GMT-3" }, 27: { abbr: "ZA", timeZone: "Africa/Johannesburg", emoji: "🇿🇦", gmtOffset: "GMT+2" }, 20: { abbr: "EG", timeZone: "Africa/Cairo", emoji: "🇪🇬", gmtOffset: "GMT+2" }, 212: { abbr: "MA", timeZone: "Africa/Casablanca", emoji: "🇲🇦", gmtOffset: "GMT+0" }, 234: { abbr: "NG", timeZone: "Africa/Lagos", emoji: "🇳🇬", gmtOffset: "GMT+1" }, 254: { abbr: "KE", timeZone: "Africa/Nairobi", emoji: "🇰🇪", gmtOffset: "GMT+3" }, 216: { abbr: "TN", timeZone: "Africa/Tunis", emoji: "🇹🇳", gmtOffset: "GMT+1" }, 213: { abbr: "DZ", timeZone: "Africa/Algiers", emoji: "🇩🇿", gmtOffset: "GMT+1" }, 251: { abbr: "ET", timeZone: "Africa/Addis_Ababa", emoji: "🇪🇹", gmtOffset: "GMT+3" }, 233: { abbr: "GH", timeZone: "Africa/Accra", emoji: "🇬🇭", gmtOffset: "GMT+0" }, 225: { abbr: "CI", timeZone: "Africa/Abidjan", emoji: "🇨🇮", gmtOffset: "GMT+0" }, 237: { abbr: "CM", timeZone: "Africa/Douala", emoji: "🇨🇲", gmtOffset: "GMT+1" }, 256: { abbr: "UG", timeZone: "Africa/Kampala", emoji: "🇺🇬", gmtOffset: "GMT+3" }, 255: { abbr: "TZ", timeZone: "Africa/Dar_es_Salaam", emoji: "🇹🇿", gmtOffset: "GMT+3" }, 250: { abbr: "RW", timeZone: "Africa/Kigali", emoji: "🇷🇼", gmtOffset: "GMT+2" }, 218: { abbr: "LY", timeZone: "Africa/Tripoli", emoji: "🇱🇾", gmtOffset: "GMT+2" }, 249: { abbr: "SD", timeZone: "Africa/Khartoum", emoji: "🇸🇩", gmtOffset: "GMT+2" }, 211: { abbr: "SS", timeZone: "Africa/Juba", emoji: "🇸🇸", gmtOffset: "GMT+2" }, 260: { abbr: "ZM", timeZone: "Africa/Lusaka", emoji: "🇿🇲", gmtOffset: "GMT+2" }, 263: { abbr: "ZW", timeZone: "Africa/Harare", emoji: "🇿🇼", gmtOffset: "GMT+2" }, 244: { abbr: "AO", timeZone: "Africa/Luanda", emoji: "🇦🇴", gmtOffset: "GMT+1" }, 220: { abbr: "GM", timeZone: "Africa/Banjul", emoji: "🇬🇲", gmtOffset: "GMT+0" }, 221: { abbr: "SN", timeZone: "Africa/Dakar", emoji: "🇸🇳", gmtOffset: "GMT+0" }, 222: { abbr: "MR", timeZone: "Africa/Nouakchott", emoji: "🇲🇷", gmtOffset: "GMT+0" }, 223: { abbr: "ML", timeZone: "Africa/Bamako", emoji: "🇲🇱", gmtOffset: "GMT+0" }, 224: { abbr: "GN", timeZone: "Africa/Conakry", emoji: "🇬🇳", gmtOffset: "GMT+0" }, 226: { abbr: "BF", timeZone: "Africa/Ouagadougou", emoji: "🇧🇫", gmtOffset: "GMT+0" }, 227: { abbr: "NE", timeZone: "Africa/Niamey", emoji: "🇳🇪", gmtOffset: "GMT+1" }, 228: { abbr: "TG", timeZone: "Africa/Lome", emoji: "🇹🇬", gmtOffset: "GMT+0" }, 229: { abbr: "BJ", timeZone: "Africa/Porto-Novo", emoji: "🇧🇯", gmtOffset: "GMT+1" }, 230: { abbr: "MU", timeZone: "Indian/Mauritius", emoji: "🇲🇺", gmtOffset: "GMT+4" }, 231: { abbr: "LR", timeZone: "Africa/Monrovia", emoji: "🇱🇷", gmtOffset: "GMT+0" }, 232: { abbr: "SL", timeZone: "Africa/Freetown", emoji: "🇸🇱", gmtOffset: "GMT+0" }, 235: { abbr: "TD", timeZone: "Africa/Ndjamena", emoji: "🇹🇩", gmtOffset: "GMT+1" }, 236: { abbr: "CF", timeZone: "Africa/Bangui", emoji: "🇨🇫", gmtOffset: "GMT+1" }, 238: { abbr: "CV", timeZone: "Atlantic/Cape_Verde", emoji: "🇨🇻", gmtOffset: "GMT-1" }, 239: { abbr: "ST", timeZone: "Africa/Sao_Tome", emoji: "🇸🇹", gmtOffset: "GMT+0" }, 240: { abbr: "GQ", timeZone: "Africa/Malabo", emoji: "🇬🇶", gmtOffset: "GMT+1" }, 241: { abbr: "GA", timeZone: "Africa/Libreville", emoji: "🇬🇦", gmtOffset: "GMT+1" }, 242: { abbr: "CG", timeZone: "Africa/Brazzaville", emoji: "🇨🇬", gmtOffset: "GMT+1" }, 243: { abbr: "CD", timeZone: "Africa/Kinshasa", emoji: "🇨🇩", gmtOffset: "GMT+1" }, 245: { abbr: "GW", timeZone: "Africa/Bissau", emoji: "🇬🇼", gmtOffset: "GMT+0" }, 252: { abbr: "SO", timeZone: "Africa/Mogadishu", emoji: "🇸🇴", gmtOffset: "GMT+3" }, 253: { abbr: "DJ", timeZone: "Africa/Djibouti", emoji: "🇩🇯", gmtOffset: "GMT+3" }, 257: { abbr: "BI", timeZone: "Africa/Bujumbura", emoji: "🇧🇮", gmtOffset: "GMT+2" }, 258: { abbr: "MZ", timeZone: "Africa/Maputo", emoji: "🇲🇿", gmtOffset: "GMT+2" }, 261: { abbr: "MG", timeZone: "Indian/Antananarivo", emoji: "🇲🇬", gmtOffset: "GMT+3" }, 262: { abbr: "RE", timeZone: "Indian/Reunion", emoji: "🇷🇪", gmtOffset: "GMT+4" }, 264: { abbr: "NA", timeZone: "Africa/Windhoek", emoji: "🇳🇦", gmtOffset: "GMT+2" }, 265: { abbr: "MW", timeZone: "Africa/Blantyre", emoji: "🇲🇼", gmtOffset: "GMT+2" }, 266: { abbr: "LS", timeZone: "Africa/Maseru", emoji: "🇱🇸", gmtOffset: "GMT+2" }, 267: { abbr: "BW", timeZone: "Africa/Gaborone", emoji: "🇧🇼", gmtOffset: "GMT+2" }, 268: { abbr: "SZ", timeZone: "Africa/Mbabane", emoji: "🇸🇿", gmtOffset: "GMT+2" }, 269: { abbr: "KM", timeZone: "Indian/Comoro", emoji: "🇰🇲", gmtOffset: "GMT+3" }, 290: { abbr: "SH", timeZone: "Atlantic/St_Helena", emoji: "🇸🇭", gmtOffset: "GMT+0" }, 61: { abbr: "AU", timeZone: "Australia/Sydney", emoji: "🇦🇺", gmtOffset: "GMT+10" }, 64: { abbr: "NZ", timeZone: "Pacific/Auckland", emoji: "🇳🇿", gmtOffset: "GMT+12" }, 675: { abbr: "PG", timeZone: "Pacific/Port_Moresby", emoji: "🇵🇬", gmtOffset: "GMT+10" }, 679: { abbr: "FJ", timeZone: "Pacific/Fiji", emoji: "🇫🇯", gmtOffset: "GMT+12" }, 685: { abbr: "WS", timeZone: "Pacific/Apia", emoji: "🇼🇸", gmtOffset: "GMT+13" }, 680: { abbr: "PW", timeZone: "Pacific/Palau", emoji: "🇵🇼", gmtOffset: "GMT+9" }, 676: { abbr: "TO", timeZone: "Pacific/Tongatapu", emoji: "🇹🇴", gmtOffset: "GMT+13" }, 677: { abbr: "SB", timeZone: "Pacific/Guadalcanal", emoji: "🇸🇧", gmtOffset: "GMT+11" }, 678: { abbr: "VU", timeZone: "Pacific/Efate", emoji: "🇻🇺", gmtOffset: "GMT+11" }, 682: { abbr: "CK", timeZone: "Pacific/Rarotonga", emoji: "🇨🇰", gmtOffset: "GMT-10" }, 683: { abbr: "NU", timeZone: "Pacific/Niue", emoji: "🇳🇺", gmtOffset: "GMT-11" }, 686: { abbr: "KI", timeZone: "Pacific/Tarawa", emoji: "🇰🇮", gmtOffset: "GMT+12" }, 687: { abbr: "NC", timeZone: "Pacific/Noumea", emoji: "🇳🇨", gmtOffset: "GMT+11" }, 688: { abbr: "TV", timeZone: "Pacific/Funafuti", emoji: "🇹🇻", gmtOffset: "GMT+12" }, 689: { abbr: "PF", timeZone: "Pacific/Tahiti", emoji: "🇵🇫", gmtOffset: "GMT-10" }, 690: { abbr: "TK", timeZone: "Pacific/Fakaofo", emoji: "🇹🇰", gmtOffset: "GMT+13" }, 691: { abbr: "FM", timeZone: "Pacific/Pohnpei", emoji: "🇫🇲", gmtOffset: "GMT+11" }, 692: { abbr: "MH", timeZone: "Pacific/Majuro", emoji: "🇲🇭", gmtOffset: "GMT+12" } }; let Ge = null, Pe = null; function Ee() { const e = document.querySelector('div[role="application"]'); if (!e) return null; const t = e.querySelectorAll('div[data-id*="@c.us"]'); for (const i of t) { const e = i.getAttribute("data-id").match(/(?:false_)?(\d+@c\.us)/); if (e && e[1]) return e[1] } return null } async function ke(e, t) { var i; if (Pe || Ge === t) return; !function (e) { Pe && (Pe.remove(), Pe = null), Pe = document.createElement("div"), Pe.id = "contact-card", Pe.style.position = "absolute", Pe.style.background = "#fff", Pe.style.color = "black", Pe.style.padding = "16px 16px 0px 16px", Pe.style.borderRadius = "8px", Pe.style.zIndex = "10000", Pe.style.width = "320px", Pe.style.boxShadow = "0 2px 8px rgba(0, 0, 0, 0.4)", Pe.style.fontFamily = "Segoe UI, Helvetica Neue, Helvetica, Arial, sans-serif"; const t = document.createElement("div"); t.style.display = "flex", t.style.alignItems = "center", t.style.marginBottom = "8px"; const i = document.createElement("div"); i.style.width = "40px", i.style.height = "40px", i.style.borderRadius = "50%", i.style.backgroundColor = "#eee", i.style.marginRight = "16px", i.classList.add("skeleton-animation"); const a = document.createElement("div"); a.style.height = "16px", a.style.width = "60%", a.style.backgroundColor = "#eee", a.style.borderRadius = "4px", a.classList.add("skeleton-animation"), t.appendChild(i), t.appendChild(a); const n = document.createElement("div"); n.style.height = "1px", n.style.backgroundColor = "#6C707226", n.style.width = "100%", n.style.margin = "12px 0"; const o = document.createElement("div"); function s() { const e = document.createElement("div"); e.style.width = "48%", e.style.marginBottom = "16px"; const t = document.createElement("div"); t.style.height = "12px", t.style.width = "40%", t.style.backgroundColor = "#eee", t.style.borderRadius = "4px", t.style.marginBottom = "6px", t.classList.add("skeleton-animation"); const i = document.createElement("div"); return i.style.height = "14px", i.style.width = "80%", i.style.backgroundColor = "#ddd", i.style.borderRadius = "4px", i.classList.add("skeleton-animation"), e.appendChild(t), e.appendChild(i), e } o.style.display = "flex", o.style.flexWrap = "wrap", o.style.gap = "8px"; for (let l = 0; l < 3; l++)o.appendChild(s()); Pe.appendChild(t), Pe.appendChild(n), Pe.appendChild(o), document.body.appendChild(Pe); const r = e.getBoundingClientRect(); Pe.style.left = `${r.left}px`, Pe.style.top = `${r.bottom + 8}px`; const d = Pe.getBoundingClientRect(); d.right > window.innerWidth && (Pe.style.left = window.innerWidth - d.width - 10 + "px"), d.left < 0 && (Pe.style.left = "10px") }(e); const a = await (n = t, new Promise((e => { const t = Date.now() + "_" + Math.random(); window.postMessage({ type: "FROM_CONTACT_CARD", payload: { phoneNumber: n, messageId: t } }, "*"), window.addEventListener("message", (function t(i) { const { data: a } = i; "FROM_PAGE" === (null == a ? void 0 : a.type) && (window.removeEventListener("message", t), e(a.payload)) })) }))); var n; let o = (null == (i = null == a ? void 0 : a.contactName) ? void 0 : i.trim()) || "-"; "Unknown" == o && (o = "-"), o.length > 51 && (o = o.substring(0, 50) + "..."); let s = function (e) { const t = Oe[e.toString()]; if (!t) return null; try { const e = new Date, i = { timeZone: t.timeZone, hour12: !0, hour: "numeric", minute: "2-digit" }, a = new Intl.DateTimeFormat("en-US", i).format(e); return { value: `${null == t ? void 0 : t.abbr} ${null == t ? void 0 : t.emoji} ${a}`, gmtOffset: `Local time (${null == t ? void 0 : t.gmtOffset})` } } catch (i) { return null } }((null == a ? void 0 : a.getCountryCode) || ""); const r = (null == a ? void 0 : a.formattedNumber) || "-", d = document.querySelector('#main > .x78zum5 span[dir="auto"]'), l = d ? d.innerText : null; Pe && (Pe.remove(), Pe = null), Pe = document.createElement("div"), Pe.style.position = "absolute", Pe.id = "contact-card", Pe.style.background = "#fff", Pe.style.color = "black", Pe.style.padding = "16px 16px 0px 16px", Pe.style.borderRadius = "8px", Pe.style.zIndex = "10000", Pe.style.width = "320px", Pe.style.boxShadow = "0 2px 8px rgba(0, 0, 0, 0.4)", Pe.style.fontFamily = "Segoe UI, Helvetica Neue, Helvetica, Arial, sans-serif"; const c = document.createElement("div"); c.style.display = "flex", c.style.alignItems = "center", c.style.marginBottom = "8px", c.style.position = "relative"; const u = document.createElement("div"); u.style.width = "40px", u.style.height = "40px", u.style.borderRadius = "50%", u.style.backgroundColor = "#dfe5e7", u.style.marginRight = "16px", u.style.display = "flex", u.style.alignItems = "center", u.style.justifyContent = "center"; const m = function () { const e = document.querySelector('div[title="Profile details"][role="button"]'); if (e) { const t = e.querySelector("img"); return !!t && t.src } return !1 }(); if (m) { const e = document.createElement("img"); e.src = m, e.alt = "Avatar", e.style.width = "100%", e.style.borderRadius = "50%", e.style.height = "100%", e.style.objectFit = "cover", u.appendChild(e) } else { const e = document.createElement("div"); e.innerHTML = '\n        <svg width="32" height="32" viewBox="0 0 24 24" fill="none"\n             xmlns="http://www.w3.org/2000/svg">\n            <path d="M12 12C14.21 12 16 10.21 16 8C16 5.79 14.21 4 12 4\n                     C9.79 4 8 5.79 8 8C8 10.21 9.79 12 12 12ZM12\n                     14C9.33 14 4 15.34 4 18V20H20V18C20 15.34\n                     14.67 14 12 14Z" fill="#888" />\n        </svg>\n    ', u.appendChild(e) } const p = document.createElement("div"); p.style.flex = "1"; const w = document.createElement("div"); w.textContent = l, w.style.fontSize = "16px", w.style.fontWeight = "bold", w.style.marginBottom = "4px"; const h = document.createElement("div"); h.style.height = "1px", h.style.backgroundColor = "#6C707226", h.style.width = "100%", h.style.marginBottom = "8px", p.appendChild(w), c.appendChild(u), c.appendChild(p); const g = document.createElement("div"); function f(e, t, i = !1) { const a = document.createElement("div"); a.style.width = "48%", a.style.marginBottom = "16px", a.style.position = "relative"; const n = document.createElement("div"); n.textContent = e, n.style.color = "#6c7072", n.style.fontSize = "14px", n.style.marginBottom = "4px", a.appendChild(n); const o = document.createElement("div"); o.style.display = "flex", o.style.position = "relative", o.style.cursor = i ? "initial" : "pointer"; const s = document.createElement("span"); if (s.textContent = t, s.style.fontSize = "14px", s.style.display = "inline-block", s.style.wordBreak = "break-word", o.appendChild(s), "-" != t && t && " " != t || (i = !0), !i) { const e = document.createElement("div"); e.innerHTML = '\n      <svg stroke="currentColor" fill="#6c7072" stroke-width="0" viewBox="0 0 24 24" \n           focusable="false" aria-hidden="true" height="1em" width="1em" \n           xmlns="http://www.w3.org/2000/svg" style="margin-left: 8px; opacity: 1; transition: opacity 0.2s ease;">\n        <g>\n          <path fill="none" d="M0 0h24v24H0z"></path>\n          <path d="M7 6V3a1 1 0 0 1 1-1h12a1 1 0 0 1 1 1v14a1 1 0 0 1-1 1h-3v3c0 .552-.45 1-1.007 1H4.007A1.001 1.001 0 0 1 3 21l.003-14c0-.552.45-1 1.007-1H7zM5.003 8L5 20h10V8H5.003zM9 6h8v10h2V4H9v2z"></path>\n        </g>\n      </svg>\n    ', o.appendChild(e), o.addEventListener("click", (() => { navigator.clipboard.writeText(t).then((() => { const t = e.querySelector("svg"); t.setAttribute("fill", "green"), setTimeout((() => { t.setAttribute("fill", "#6c7072") }), 1e3) })) })) } return a.appendChild(o), a } g.style.display = "flex", g.style.flexWrap = "wrap", g.style.gap = "8px", g.style.minHeight = "84px", g.appendChild(f("WhatsApp name", o, "-" == o || " " == o)), g.appendChild(f("Phone number", r)), s && g.appendChild(f(s.gmtOffset, s.value, !0)); const b = document.createElement("div"); b.style.flex = "1 0 calc(50% - 10px)", b.style.minWidth = "200px", g.style.position = "relative"; const y = document.createElement("img"); y.src = chrome.runtime.getURL("assets/logo-with-text.jpg"), y.style.position = "absolute", y.style.bottom = "-10px", y.style.right = "-18px", y.style.width = "80px", y.style.margin = "10px", y.style.opacity = "0.9", g.appendChild(y), g.appendChild(b), Pe.appendChild(c), Pe.appendChild(h), Pe.appendChild(g), document.body.appendChild(Pe); const S = e.getBoundingClientRect(); Pe.style.left = `${S.left}px`, Pe.style.top = `${S.bottom + 8}px`; const A = Pe.getBoundingClientRect(); A.right > window.innerWidth && (Pe.style.left = window.innerWidth - A.width - 10 + "px"), A.left < 0 && (Pe.style.left = "10px"), Ge = t } function je(e) { let t = e.detail; const i = JSON.parse(t.data); chrome.runtime.sendMessage(chrome.runtime.id, { channelName: n, data: i }, (e => { const i = new CustomEvent("connect_sheet_wa_receive", { detail: { response: { ...e }, requestKey: t.requestKey } }); document.body.dispatchEvent(i) })) } let Le = !1; const Ie = '\n  <svg\n    xmlns="http://www.w3.org/2000/svg"\n    width="24"\n    height="24"\n    viewBox="0 0 24 24"\n    fill="none"\n    stroke="#54646f"\n    stroke-width="2"\n    stroke-linecap="round"\n    stroke-linejoin="round"\n    class="lucide lucide-eye-icon lucide-eye"\n  >\n    <path d="M2.062 12.348a1 1 0 0 1 0-.696 10.75 10.75 0 0 1 19.876 0 1 1 0 0 1 0 .696 10.75 10.75 0 0 1-19.876 0" />\n    <circle cx="12" cy="12" r="3" />\n  </svg>\n', Ze = e => { const t = e.target, i = t.children[0].classList.contains("lucide-eye-icon"); t.innerHTML = i ? '\n  <svg\n    xmlns="http://www.w3.org/2000/svg"\n    width="24"\n    height="24"\n    viewBox="0 0 24 24"\n    fill="none"\n    stroke="#54646f"\n    stroke-width="2"\n    stroke-linecap="round"\n    stroke-linejoin="round"\n    class="lucide lucide-eye-off-icon lucide-eye-off"\n  >\n    <path d="M10.733 5.076a10.744 10.744 0 0 1 11.205 6.575 1 1 0 0 1 0 .696 10.747 10.747 0 0 1-1.444 2.49" />\n    <path d="M14.084 14.158a3 3 0 0 1-4.242-4.242" />\n    <path d="M17.479 17.499a10.75 10.75 0 0 1-15.417-5.151 1 1 0 0 1 0-.696 10.75 10.75 0 0 1 4.446-5.143" />\n    <path d="m2 2 20 20" />\n  </svg>\n' : Ie; const a = new CustomEvent("togglePrivacy"); document.body.dispatchEvent(a) }, Ne = () => { Le || (Le = !0, document.body.addEventListener("WA_READY", (async () => { var e; await async function (e) { return new Promise(((t, i) => { const a = new MutationObserver(((i, n) => { document.querySelector(e) && (a.disconnect(), t()) })); a.observe(document, { childList: !0, attributes: !0, subtree: !0 }), document.querySelector(e) && (a.disconnect(), t()) })) }('[aria-label="Communities"]'); const t = document.querySelector('[aria-label="Communities"]'), i = null == (e = null == t ? void 0 : t.parentElement) ? void 0 : e.parentElement, a = document.createElement("div"); if (a.className = "_ajv7 x1n2onr6 x1okw0bk x5yr21d x14yjl9h xudhj91 x18nykt9 xww2gxu xlkovuz x16j0l1c xyklrzc x1mh8g0r x1anpbxc x18wx58x xo92w5m x1c4vz4f xs83m0k xdl72j9 x1g77sc7 x78zum5 xozqiw3 x1oa3qoh x12fk4p8 xeuugli x2lwn1j x1nhvcw1 x1q0g3np x1cy8zhl x100vrsf x1vqgdyp xhgddhk xdxvlk3 x1fglp x1rp6h8o xg6i1s1 x1277o0a x13i9f1t xr9ek0c xjpr12u", a.style.display = "flex", a.style.justifyContent = "center", a.style.alignItems = "center", a.style.position = "relative", i) { i.insertAdjacentElement("afterend", a); const e = document.createElement("button"); e.addEventListener("click", Ze), e.innerHTML = Ie, e.id = "privacyBtn", e.style.marginTop = "10px", a.appendChild(e); const t = document.createElement("div"); t.textContent = "Privacy by SheetWA", t.style.position = "fixed", t.style.backgroundColor = "#333", t.style.color = "white", t.style.padding = "10px 12px", t.style.borderRadius = "15px", t.style.fontSize = "12px", t.style.zIndex = "9999", t.style.display = "none", t.style.boxShadow = "0 2px 5px rgba(0,0,0,0.2)", t.style.pointerEvents = "none", document.body.appendChild(t), e.addEventListener("mouseenter", (() => { const i = e.getBoundingClientRect(); t.style.display = "block", t.style.top = i.top + i.height / 2 - t.offsetHeight / 2 + "px", t.style.left = i.right + 14 + "px" })), e.addEventListener("mouseleave", (() => { t.style.display = "none" })) } }))) }, Be = { IS_EXT_INSTALLED: !1 }; async function Re() { let e = document.querySelector("#wa_extetion_button button"); for (let t = 0; t < 3 && !e; t++)await ve(500), e = document.querySelector("#wa_extetion_button button"); return e instanceof HTMLButtonElement ? e : void 0 } async function qe(e) { xe("Opening SheetWA, initialized by", e); const t = await Re(); if (t && Be.IS_EXT_INSTALLED) return void t.click(); document.dispatchEvent(new CustomEvent("INITIATE_EXTENSION_OPEN", { detail: { initializer: e } })); const i = setInterval((() => { document.body && (clearInterval(i), document.body.addEventListener(a, (async () => { var e; null == (e = await Re()) || e.click(), Be.IS_EXT_INSTALLED = !0 }), { once: !0 })) }), 500) } class Fe { } function ze(e) { return new Promise((t => { chrome.runtime.sendMessage(chrome.runtime.id, { channelName: n, data: e }, (e => { t(e) })) })) } let Je; __publicField(Fe, "get", (async (e, t) => { const i = ze({ action: "fetchData", data: { url: e, method: "GET", token: null == t ? void 0 : t.token, retryLimit: null == t ? void 0 : t.retryLimit } }); if ("AxiosError" == (null == i ? void 0 : i.name) && (null == i ? void 0 : i.stack)) throw i; return i })), __publicField(Fe, "post", (async (e, t, i) => { const a = ze({ action: "fetchData", data: { url: e, method: "POST", body: t, token: null == i ? void 0 : i.token, retryLimit: null == i ? void 0 : i.retryLimit } }); if ("AxiosError" == (null == a ? void 0 : a.name) && (null == a ? void 0 : a.stack)) throw a; return a })), __publicField(Fe, "put", (async (e, t, i) => { const a = ze({ action: "fetchData", data: { url: e, method: "PUT", body: t, token: null == i ? void 0 : i.token, retryLimit: null == i ? void 0 : i.retryLimit } }); if ("AxiosError" == (null == a ? void 0 : a.name) && (null == a ? void 0 : a.stack)) throw a; return a })), __publicField(Fe, "delete", (async (e, t, i) => { const a = ze({ action: "fetchData", data: { url: e, method: "DELETE", body: t, token: null == i ? void 0 : i.token, retryLimit: null == i ? void 0 : i.retryLimit } }); if ("AxiosError" == (null == a ? void 0 : a.name) && (null == a ? void 0 : a.stack)) throw a; return a })); let Ue = !1, De = !1, Ve = [{ shortCutName: "Hello", shortCutMessage: "Hi! \n\nHow can we help you today? 😊" }, { shortCutName: "Acknowledgment", shortCutMessage: "We’ve received your request and are looking into it.\n\nWe’ll get back to you shortly!" }, { shortCutName: "Follow-Up", shortCutMessage: "Just checking in to see if there’s anything else you need help with! 🔄" }, { shortCutName: "Check-In", shortCutMessage: "Hi! \n\nIs there anything we can assist you with today? \n\nWe’re just a message away!" }, { shortCutName: "Payment Reminder", shortCutMessage: "This is a gentle reminder about your pending payment. \n\nPlease let us know if you need assistance" }, { shortCutName: "Thank You", shortCutMessage: "Thank you for choosing us! \n\nLet us know if you have any questions or need assistance." }]; const Ke = e => { var t; const i = document.getElementById(e); i && (null == (t = i.parentNode) || t.removeChild(i)) }; function He(e) { if (!De) return; if (document.getElementById("reply_div") && !Ue) return; const t = document.querySelector("footer"); if (!t) return; const i = document.createElement("div"); i.id = "reply_div", i.style.padding = "8px 12px 0px 12px", i.style.top = "-36px", i.style.zIndex = "1", i.style.width = "calc(100% - 100px)", i.style.whiteSpace = "nowrap", i.style.overflowX = "scroll", i.style.backgroundColor = "var(--rich-text-panel-background)"; const a = document.createElement("style"); a.textContent = "\n    #reply_div::-webkit-scrollbar { height: 0px; }\n    #reply_div::-webkit-scrollbar-thumb {\n      background: #888;\n      border-radius: 10px;\n    }\n    #reply_div::-webkit-scrollbar-thumb:hover { background: #555; }\n  ", document.head.appendChild(a); const n = (t = "") => { i.innerHTML = "", e.filter((e => e.shortCutName.toLowerCase().includes(t.toLowerCase()))).forEach((e => { const t = e.shortCutName.length > 47 ? e.shortCutName.substring(0, 47) + "..." : e.shortCutName, a = document.createElement("button"); a.className = "reply_click CtaBtn", a.style.color = "var(--message-primary)", a.style.backgroundColor = "var(--outgoing-background)", a.style.borderRadius = "15px", a.style.padding = "4px 8px", a.style.fontSize = "12px", a.style.marginRight = "8px", a.style.marginBottom = "4px", a.value = e.shortCutMessage, a.innerText = t, a.addEventListener("click", (() => { $e(a.value) })), i.appendChild(a) })); const a = e.filter((e => { var i, a; return null == (a = null == (i = null == e ? void 0 : e.shortCutName) ? void 0 : i.toLowerCase()) ? void 0 : a.includes(null == t ? void 0 : t.toLowerCase()) })); if (0 === a.length) { const e = document.createElement("p"); e.innerText = "No quick replies found", e.style.color = "var(--message-primary)", e.style.fontSize = "12px", e.style.marginRight = "8px", e.style.marginBottom = "4px", e.style.padding = "4px 12px", i.appendChild(e) } console.log("renderReplies", t, e); const n = document.createElement("button"); n.innerText = a.length > 0 ? "Edit" : "Add", n.id = "quick-reply-edit-btn", n.style.position = "absolute", n.style.color = "var(--message-primary)", n.style.right = "-1px", n.style.width = "80px", n.style.top = "0px", n.style.padding = "1.5% 8px", n.style.fontSize = "14px", n.style.height = "44%", n.style.maxHeight = "54px", n.style.backgroundColor = "var(--rich-text-panel-background)", n.addEventListener("click", (() => { qe("edit_quick_chat") })), i.appendChild(n) }; n(), Ue && (Ue = !1, Ke("quick-reply-edit-btn"), Ke("reply_div")), t.insertBefore(i, t.firstChild); const o = document.getElementsByClassName("copyable-area")[0]; o && o.lastChild.scrollBy(0, 40), (() => { const e = document.getElementById("main"); if (!e) return console.warn("No #main container found"); const t = e.querySelector('[data-lexical-editor="true"]'); if (!t) return console.warn("No editor found inside #main"); const i = function (e, t) { let i; return (...a) => { clearTimeout(i), i = setTimeout((() => e(...a)), t) } }((() => { const e = t.textContent || ""; if (console.log("text", e), e.includes("#")) { const t = e.indexOf("#"), i = e.slice(t + 1).trim(); n(i) } else n() }), 200); t.addEventListener("input", i), t.addEventListener("keyup", i) })() } const Qe = () => { chrome.storage.local.get(["quickReplies", "isQuickReplyVisible"], (function (e) { let t = (null == e ? void 0 : e.quickReplies) || Ve; Je && clearInterval(Je), Ue = !0, (null == e ? void 0 : e.isQuickReplyVisible) && (He(t), Je = setInterval((() => { He(t) }), 2e3)) })) }, $e = async e => { if (xe("sendSuggestionMessage function called with message:", e), e) { e = e.replace(/<span class='ql-cursor'>.*?<\/span>/g, ""); document.querySelectorAll("[contenteditable='true']")[1] ? (await function (e) { const t = document.querySelector('#main div[data-lexical-editor="true"][contenteditable="true"]'); if (!t) return !1; try { t.focus(); const i = t.querySelector('span[data-lexical-text="true"]'); if (i) i.textContent = e; else { t.innerHTML = ""; const i = document.createElement("p"); i.className = "selectable-text copyable-text x15bjb6t x1n2onr6", i.setAttribute("dir", "ltr"), i.style.cssText = "text-indent: 0px; margin-top: 0px; margin-bottom: 0px;"; const a = document.createElement("span"); a.className = "selectable-text copyable-text xkrh14z", a.setAttribute("data-lexical-text", "true"), a.textContent = e, i.appendChild(a), t.appendChild(i) } const a = t.querySelector('span[data-lexical-text="true"]'); if (a && a.firstChild) { const t = document.createRange(); t.setStart(a.firstChild, e.length), t.collapse(!0); const i = window.getSelection(); null == i || i.removeAllRanges(), null == i || i.addRange(t) } const n = new InputEvent("input", { bubbles: !0, cancelable: !0, inputType: "insertText", data: e }); return t.dispatchEvent(n), !0 } catch (i) { return !1 } }(e), setTimeout((() => { xe("Send action simulated with 'clicked' message.") }), 200)) : console.warn("Content editable element not found.") } else console.warn("Message is empty or undefined. Aborting send action.") }; document.addEventListener("DOMContentLoaded", (function () { !function () { const e = new URL(window.location.href); new URLSearchParams(e.search).get("ext") && Me({ type: "close_inactive_wa_tab", payload: null }) }(), document.body.addEventListener(a, (() => { console.log("listening on wa ready"), Be.IS_EXT_INSTALLED = !0, Me({ type: "WA_content_script_loaded", payload: null }).catch((() => { console.error("unable to send WA_content_script_loaded msg to wroker") })); const e = new URL(window.location.href); new URLSearchParams(e.search).get("ext") && qe("sheetwa initialization event") })), document.body.addEventListener("connect_sheet_wa_sent", je), Ne(), chrome.storage.local.get(["quickReplies", "isQuickReplyVisible"], (async function (e) { try { let t = (null == e ? void 0 : e.quickReplies) || Ve; e.hasOwnProperty("isQuickReplyVisible") ? (null == e ? void 0 : e.isQuickReplyVisible) && (xe("enbale quick reply visbility if found in storage"), De = !0) : (xe("first time install", "The key 'isQuickReplyVisible' is not present.first install"), De = !0); const { data: i } = await Fe.get(`${o}/quickreply`, { token: !0 }), a = (null == i ? void 0 : i.map((({ _id: e, name: t, message: i }) => ({ _id: e, shortCutName: t, shortCutMessage: i })))) || []; let n = []; n = 0 === (null == a ? void 0 : a.length) ? t : function (e, t) { const i = [], a = []; let n = [...t]; return e.forEach((e => { const t = n.find((t => t.shortCutName === e.shortCutName)); i.push(t || null), t && (n = n.filter((e => e !== t))) })), a.push(...n), [...i.filter((e => null !== e)), ...a] }(t, a), chrome.storage.local.set({ isQuickReplyVisible: De, quickReplies: n }), Je = setInterval((() => { He(n) }), 2e3) } catch (t) { console.error("SheetWA: Error during quick reply initialization", t) } })), chrome.storage.onChanged.addListener(((e, t) => { var i; xe("Local storage data changed", e, t), "local" === t && e.quickReplies && (xe("quickReplies updated:", e.quickReplies.newValue), Qe()), "local" === t && e.isQuickReplyVisible && ((null == (i = null == e ? void 0 : e.isQuickReplyVisible) ? void 0 : i.newValue) ? (Qe(), De = !0) : (De = !1, Ke("quick-reply-edit-btn"), Ke("reply_div"))) })), (() => { const e = new WeakMap; function t() { Pe && (Pe.remove(), Pe = null, Ge = null) } function i() { const i = document.querySelector('div[title="Profile details"]'); let a = document.querySelector(".x78zum5.x1cy8zhl.xisnujt.x1nxh6w3.xcgms0a.x16cd2qt"); if (a) { const e = a.querySelector("span[title]"), t = e ? e.getAttribute("title") : null; "click here for contact info" !== t && "Business Account" !== t || (a = !1) } if (a || !i) return; const n = document.querySelector("#main > header > div:nth-child(3)"); null == n || n.addEventListener("mouseenter", (() => { t() })); const o = document.querySelector("#main > header"), s = document.querySelector("#main"); o && !e.has(o) && (e.set(o, !0), o.addEventListener("mouseenter", (() => { if (Pe) return; const e = Ee(); e && ke(i, e) }))), e.has(i) || (e.set(i, !0), i.addEventListener("mouseenter", (() => { if (Pe) return; const e = Ee(); e && ke(i, e) }))), s && !e.has(s) && (e.set(s, !0), s.addEventListener("mouseleave", (e => { Pe && e.relatedTarget instanceof Node && Pe.contains(e.relatedTarget) || t() }))), Pe && !e.has(Pe) && (e.set(Pe, !0), Pe.addEventListener("mouseenter", (() => { })), Pe.addEventListener("mouseleave", (e => { e.relatedTarget && o.contains(e.relatedTarget) || t() }))), e.has(document.body) || (e.set(document.body, !0), document.body.addEventListener("click", (e => { Pe && e.target instanceof Node && (Pe.contains(e.target) || i.contains(e.target) || o && o.contains(e.target) || t()) }))) } const a = new MutationObserver((() => { i() })); a.observe(document.body, { childList: !0, subtree: !0, attributes: !1, characterData: !1 }), i() })() })), chrome.runtime.onMessage.addListener(((e, t, i) => { var a; (a = "open_extension", e => e.type === a)(e) && qe("request_from_worker"); return i({ type: "open_extension", payload: !0 }), !0 })) }();
